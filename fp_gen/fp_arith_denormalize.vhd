-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\fp_gen\fp_arith_denormalize.vhd
-- Created: 2013-02-05 08:01:57
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fp_arith_denormalize
-- Source Path: fp_arith_denormalize
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY fp_arith_denormalize IS
  PORT( frac                              :   IN    std_logic_vector(0 TO 22);  -- boolean [23]
        exp                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        exp_new                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        buf_in                            :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        frac_new                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        buf_out                           :   OUT   std_logic_vector(0 TO 23)  -- boolean [24]
        );
END fp_arith_denormalize;


ARCHITECTURE rtl OF fp_arith_denormalize IS

  -- Component Declarations
  COMPONENT Variable_bitshift
    PORT( u                               :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          n                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          y                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Variable_bitshift
    USE ENTITY work.Variable_bitshift(rtl);

  -- Signals
  SIGNAL exp_new_unsigned                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL buf_in_unsigned                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion2_out1       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL exp_unsigned                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add_sub_cast                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_sub_cast_1                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_sub_temp                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1                         : signed(7 DOWNTO 0);  -- int8
  SIGNAL Variable_bitshift_out1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Variable_bitshift_out1_unsigned  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion1_out1       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL sign1_out1                       : std_logic;
  SIGNAL Mux1_out1                        : std_logic_vector(0 TO 23);  -- boolean [24]

BEGIN
  u_Variable_bitshift : Variable_bitshift
    PORT MAP( u => std_logic_vector(Data_Type_Conversion2_out1),  -- uint32
              n => std_logic_vector(Add_out1),  -- int8
              y => Variable_bitshift_out1  -- uint32
              );

  exp_new_unsigned <= unsigned(exp_new);

  buf_in_unsigned <= unsigned(buf_in);

  Data_Type_Conversion2_out1 <= resize(buf_in_unsigned, 32);

  exp_unsigned <= unsigned(exp);

  Add_sub_cast <= signed(resize(exp_new_unsigned, 32));
  Add_sub_cast_1 <= signed(resize(exp_unsigned, 32));
  Add_sub_temp <= Add_sub_cast - Add_sub_cast_1;
  Add_out1 <= Add_sub_temp(7 DOWNTO 0);

  Variable_bitshift_out1_unsigned <= unsigned(Variable_bitshift_out1);

  Data_Type_Conversion1_out1 <= Variable_bitshift_out1_unsigned(23 DOWNTO 0);

  frac_new <= std_logic_vector(Data_Type_Conversion1_out1);

  sign1_out1 <= '1';

  Mux1_out1(0) <= sign1_out1;
  Mux1_out1(1) <= frac(0);
  Mux1_out1(2) <= frac(1);
  Mux1_out1(3) <= frac(2);
  Mux1_out1(4) <= frac(3);
  Mux1_out1(5) <= frac(4);
  Mux1_out1(6) <= frac(5);
  Mux1_out1(7) <= frac(6);
  Mux1_out1(8) <= frac(7);
  Mux1_out1(9) <= frac(8);
  Mux1_out1(10) <= frac(9);
  Mux1_out1(11) <= frac(10);
  Mux1_out1(12) <= frac(11);
  Mux1_out1(13) <= frac(12);
  Mux1_out1(14) <= frac(13);
  Mux1_out1(15) <= frac(14);
  Mux1_out1(16) <= frac(15);
  Mux1_out1(17) <= frac(16);
  Mux1_out1(18) <= frac(17);
  Mux1_out1(19) <= frac(18);
  Mux1_out1(20) <= frac(19);
  Mux1_out1(21) <= frac(20);
  Mux1_out1(22) <= frac(21);
  Mux1_out1(23) <= frac(22);

  buf_out <= Mux1_out1;

END rtl;

