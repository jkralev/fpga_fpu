-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\fp_gen\Normalize.vhd
-- Created: 2013-02-05 22:38:03
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Normalize
-- Source Path: fp_sum/Normalize
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.fp_sum_pkg.ALL;

ENTITY Normalize IS
  PORT( u                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        y                                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        de                                :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
        );
END Normalize;


ARCHITECTURE rtl OF Normalize IS

  -- Signals
  SIGNAL u_unsigned                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL y_tmp                            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL de_tmp                           : signed(7 DOWNTO 0);  -- int8

BEGIN
  u_unsigned <= unsigned(u);

  Normalize_1_output : PROCESS (u_unsigned)
    VARIABLE buf : unsigned(31 DOWNTO 0);
    VARIABLE p : signed(7 DOWNTO 0);
    VARIABLE c : unsigned(31 DOWNTO 0);
    VARIABLE c_0 : unsigned(31 DOWNTO 0);
    VARIABLE absk1 : unsigned(7 DOWNTO 0);
    VARIABLE absk1_0 : unsigned(7 DOWNTO 0);
    VARIABLE absk1_1 : unsigned(7 DOWNTO 0);
    VARIABLE add_temp : vector_of_signed9(0 TO 24);
    VARIABLE p_0 : signed(8 DOWNTO 0);
    VARIABLE cast : signed(7 DOWNTO 0);
    VARIABLE add_temp_0 : vector_of_signed32(0 TO 24);
  BEGIN
    buf := u_unsigned;
    p := to_signed(-1, 8);
    c := u_unsigned AND to_unsigned(16777216, 32);

    FOR ind IN 0 TO 24 LOOP
      IF  NOT (c /= 0) THEN 
        add_temp(ind) := resize(p, 9) + 1;
        IF (add_temp(ind)(8) = '0') AND (add_temp(ind)(7) /= '0') THEN 
          p := "01111111";
        ELSIF (add_temp(ind)(8) = '1') AND (add_temp(ind)(7) /= '1') THEN 
          p := "10000000";
        ELSE 
          p := add_temp(ind)(7 DOWNTO 0);
        END IF;
        add_temp_0(ind) := to_signed(ind + 1, 32);
        absk1_0 := unsigned(add_temp_0(ind)(7 DOWNTO 0));
        buf := buf sll to_integer(absk1_0);
        c := buf AND to_unsigned(16777216, 32);
      END IF;
    END LOOP;

    c_0 := to_unsigned(0, 32);
    IF p < 0 THEN 
      p_0 :=  - (resize(p, 9));
      IF (p_0(8) = '0') AND (p_0(7) /= '0') THEN 
        cast := "01111111";
      ELSIF (p_0(8) = '1') AND (p_0(7) /= '1') THEN 
        cast := "10000000";
      ELSE 
        cast := p_0(7 DOWNTO 0);
      END IF;
      IF cast(7) = '1' THEN 
        absk1_1 := "00000000";
      ELSE 
        absk1_1 := unsigned(cast);
      END IF;
      IF absk1_1 < 32 THEN 
        c_0 := u_unsigned srl to_integer(absk1_1);
      END IF;
    ELSE 
      absk1 := unsigned(p);
      IF absk1 < 32 THEN 
        c_0 := u_unsigned sll to_integer(absk1);
      END IF;
    END IF;
    y_tmp <= c_0 AND to_unsigned(8388607, 32);
    de_tmp <= p;
  END PROCESS Normalize_1_output;


  y <= std_logic_vector(y_tmp);

  de <= std_logic_vector(de_tmp);

END rtl;

