-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\test_lan.vhd
-- Created: 2013-02-08 12:50:01
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: test_lan
-- Source Path: test_lan
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY test_lan IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        TX_CLK                            :   IN    std_logic;
        btn_1                             :   IN    std_logic;
        Data_out                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        led_0                             :   OUT   std_logic;
        tx_data                           :   OUT   std_logic_vector(0 TO 3);  -- boolean [4]
        tx_en                             :   OUT   std_logic;
        Address                           :   OUT   std_logic_vector(10 DOWNTO 0)  -- ufix11
        );
END test_lan;


ARCHITECTURE rtl OF test_lan IS

  -- Component Declarations
  COMPONENT Transmit
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Data                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ev                              :   IN    std_logic;
          btn                             :   IN    std_logic;
          next_rdy                        :   IN    std_logic;
          psize                           :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
          TX_DATA                         :   OUT   std_logic_vector(0 TO 3);  -- boolean [4]
          TX_EN                           :   OUT   std_logic;
          ind1                            :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
          get_next                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Transmit
    USE ENTITY work.Transmit(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Integer_Delay1_out1              : std_logic;
  SIGNAL Integer_Delay2_out1              : std_logic;
  SIGNAL Constant_out1                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Transmit_out4                    : std_logic;
  SIGNAL Integer_Delay3_out1              : std_logic;
  SIGNAL Transmit_out1                    : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL Transmit_out2                    : std_logic;
  SIGNAL Transmit_out3                    : std_logic_vector(10 DOWNTO 0);  -- ufix11

BEGIN
  u_Transmit : Transmit
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Data => Data_out,  -- uint8
              ev => Integer_Delay1_out1,
              btn => Integer_Delay2_out1,
              next_rdy => Integer_Delay3_out1,
              psize => std_logic_vector(Constant_out1),  -- ufix11
              TX_DATA => Transmit_out1,  -- boolean [4]
              TX_EN => Transmit_out2,
              ind1 => Transmit_out3,  -- ufix11
              get_next => Transmit_out4
              );

  enb <= clk_enable;

  Integer_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay1_out1 <= TX_CLK;
      END IF;
    END IF;
  END PROCESS Integer_Delay1_process;


  Integer_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay2_out1 <= btn_1;
      END IF;
    END IF;
  END PROCESS Integer_Delay2_process;


  Constant_out1 <= to_unsigned(168, 11);

  Integer_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay3_out1 <= Transmit_out4;
      END IF;
    END IF;
  END PROCESS Integer_Delay3_process;


  led_0 <= Transmit_out2;

  tx_data <= Transmit_out1;

  tx_en <= Transmit_out2;

  Address <= Transmit_out3;

  ce_out <= clk_enable;

END rtl;

