-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\Analog_Board_SPI_Controller.vhd
-- Created: 2013-03-28 12:25:50
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Analog_Board_SPI_Controller
-- Source Path: analog_ext/Analog Board SPI Controller
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.analog_ext_pkg.ALL;

ENTITY Analog_Board_SPI_Controller IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        sample_tick                       :   IN    std_logic;
        CLK_IN                            :   IN    std_logic;
        DOUT                              :   IN    std_logic;
        A                                 :   IN    std_logic_vector(0 TO 15);  -- boolean [16]
        B                                 :   IN    std_logic_vector(0 TO 15);  -- boolean [16]
        CSL                               :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        CLK_OUT                           :   OUT   std_logic;
        sig                               :   OUT   std_logic_vector(0 TO 11);  -- boolean [12]
        sig1                              :   OUT   std_logic_vector(0 TO 11);  -- boolean [12]
        SDI                               :   OUT   std_logic
        );
END Analog_Board_SPI_Controller;


ARCHITECTURE rtl OF Analog_Board_SPI_Controller IS

  -- Signals
  SIGNAL is_Analog_Board_SPI_Controller   : T_state_type_is_Analog_Board_SPI_Controller;  -- uint8
  SIGNAL CSL_tmp                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL ind                              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL CSL_reg                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL CLK_OUT_reg                      : std_logic;
  SIGNAL sig_reg                          : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL sig1_reg                         : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL SDI_reg                          : std_logic;
  SIGNAL is_Analog_Board_SPI_Controller_next : T_state_type_is_Analog_Board_SPI_Controller;  -- enumerated type (20 enums)
  SIGNAL ind_next                         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL CSL_reg_next                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL CLK_OUT_reg_next                 : std_logic;
  SIGNAL sig_reg_next                     : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL sig1_reg_next                    : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL SDI_reg_next                     : std_logic;

BEGIN
  Analog_Board_SPI_Controller_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ind <= to_unsigned(0, 4);
      sig_reg <= (OTHERS => '0');
      sig1_reg <= (OTHERS => '0');
      SDI_reg <= '0';
      CSL_reg <= to_unsigned(0, 3);
      CLK_OUT_reg <= '0';
      is_Analog_Board_SPI_Controller <= IN_Wait_Request;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        is_Analog_Board_SPI_Controller <= is_Analog_Board_SPI_Controller_next;
        ind <= ind_next;
        CSL_reg <= CSL_reg_next;
        CLK_OUT_reg <= CLK_OUT_reg_next;
        sig_reg <= sig_reg_next;
        sig1_reg <= sig1_reg_next;
        SDI_reg <= SDI_reg_next;
      END IF;
    END IF;
  END PROCESS Analog_Board_SPI_Controller_1_process;

  Analog_Board_SPI_Controller_1_output : PROCESS (is_Analog_Board_SPI_Controller, sample_tick, CLK_IN, DOUT, ind, A, B, CSL_reg, CLK_OUT_reg, 
      sig_reg, sig1_reg, SDI_reg)
  BEGIN
    is_Analog_Board_SPI_Controller_next <= is_Analog_Board_SPI_Controller;
    ind_next <= ind;
    CSL_reg_next <= CSL_reg;
    CLK_OUT_reg_next <= CLK_OUT_reg;
    sig_reg_next <= sig_reg;
    sig1_reg_next <= sig1_reg;
    SDI_reg_next <= SDI_reg;

    CASE is_Analog_Board_SPI_Controller IS
      WHEN IN_Buf_state =>
        IF CLK_IN = '1' THEN 
          is_Analog_Board_SPI_Controller_next <= IN_Buf_state1;
        END IF;
      WHEN IN_Buf_state1 =>
        IF CLK_IN = '0' THEN 
          CSL_reg_next <= to_unsigned(0, 3);
          ind_next <= to_unsigned(0, 4);
          SDI_reg_next <= B(0);
          is_Analog_Board_SPI_Controller_next <= IN_DAC_A_Send1;
        END IF;
      WHEN IN_Buf_state2 =>
        IF CLK_IN = '0' THEN 
          is_Analog_Board_SPI_Controller_next <= IN_Wait_Request;
        END IF;
      WHEN IN_DAC_A_Send =>
        IF CLK_IN = '1' THEN 
          CLK_OUT_reg_next <= '1';
          ind_next <= ind + 1;
          is_Analog_Board_SPI_Controller_next <= IN_Wait_CLK;
        END IF;
      WHEN IN_DAC_A_Send1 =>
        IF CLK_IN = '1' THEN 
          CLK_OUT_reg_next <= '1';
          ind_next <= ind + 1;
          is_Analog_Board_SPI_Controller_next <= IN_Wait_CLK1;
        END IF;
      WHEN IN_Get_Sample =>
        IF CLK_IN = '1' THEN 
          CLK_OUT_reg_next <= '1';
          is_Analog_Board_SPI_Controller_next <= IN_Get_Sample1;
        END IF;
      WHEN IN_Get_Sample1 =>
        IF CLK_IN = '0' THEN 
          CLK_OUT_reg_next <= '0';
          is_Analog_Board_SPI_Controller_next <= IN_Get_Sample2;
        END IF;
      WHEN IN_Get_Sample2 =>
        IF CLK_IN = '1' THEN 
          CLK_OUT_reg_next <= '1';
          is_Analog_Board_SPI_Controller_next <= IN_Get_Sample3;
        END IF;
      WHEN IN_Get_Sample3 =>
        IF CLK_IN = '0' THEN 
          CLK_OUT_reg_next <= '0';
          is_Analog_Board_SPI_Controller_next <= IN_Get_Sample4;
        END IF;
      WHEN IN_Get_Sample4 =>
        IF CLK_IN = '1' THEN 
          CLK_OUT_reg_next <= '1';
          is_Analog_Board_SPI_Controller_next <= IN_Get_Sample5;
        END IF;
      WHEN IN_Get_Sample5 =>
        IF CLK_IN = '0' THEN 
          CLK_OUT_reg_next <= '0';
          ind_next <= to_unsigned(0, 4);
          is_Analog_Board_SPI_Controller_next <= IN_Receive_Data;
        END IF;
      WHEN IN_LatchData =>
        IF CLK_IN = '1' THEN 
          is_Analog_Board_SPI_Controller_next <= IN_Buf_state2;
        END IF;
      WHEN IN_Receive_Data =>
        IF CLK_IN = '1' THEN 
          CLK_OUT_reg_next <= '1';
          sig_reg_next(to_integer(ind)) <= DOUT;
          IF ind = 11 THEN 
            is_Analog_Board_SPI_Controller_next <= IN_Receive_Data2;
          ELSE 
            is_Analog_Board_SPI_Controller_next <= IN_Receive_Data1;
          END IF;
        END IF;
      WHEN IN_Receive_Data1 =>
        IF CLK_IN = '0' THEN 
          CLK_OUT_reg_next <= '0';
          ind_next <= ind + 1;
          is_Analog_Board_SPI_Controller_next <= IN_Receive_Data;
        END IF;
      WHEN IN_Receive_Data2 =>
        IF CLK_IN = '0' THEN 
          CLK_OUT_reg_next <= '0';
          CSL_reg_next <= to_unsigned(0, 3);
          SDI_reg_next <= '0';
          is_Analog_Board_SPI_Controller_next <= IN_Wait_CLK_01;
        END IF;
      WHEN IN_Wait_CLK =>
        IF CLK_IN = '0' THEN 
          CLK_OUT_reg_next <= '0';
          SDI_reg_next <= A(to_integer(ind));
          is_Analog_Board_SPI_Controller_next <= IN_DAC_A_Send;
        END IF;
      WHEN IN_Wait_CLK1 =>
        IF CLK_IN = '0' THEN 
          CLK_OUT_reg_next <= '0';
          SDI_reg_next <= B(to_integer(ind));
          is_Analog_Board_SPI_Controller_next <= IN_DAC_A_Send1;
        END IF;
      WHEN IN_Wait_CLK_0 =>
        IF CLK_IN = '0' THEN 
          CSL_reg_next <= to_unsigned(6, 3);
          CLK_OUT_reg_next <= '0';
          is_Analog_Board_SPI_Controller_next <= IN_Get_Sample;
        END IF;
      WHEN IN_Wait_CLK_01 =>
        IF CLK_IN = '0' THEN 
          CSL_reg_next <= to_unsigned(7, 3);
          CLK_OUT_reg_next <= '0';
          ind_next <= to_unsigned(0, 4);
          SDI_reg_next <= A(0);
          is_Analog_Board_SPI_Controller_next <= IN_DAC_A_Send;
        END IF;
      WHEN IN_Wait_Request =>
        IF sample_tick = '1' THEN 
          is_Analog_Board_SPI_Controller_next <= IN_Wait_CLK_0;
        END IF;
      WHEN OTHERS => 
        CSL_reg_next <= to_unsigned(0, 3);
        CLK_OUT_reg_next <= '0';
        is_Analog_Board_SPI_Controller_next <= IN_Wait_Request;
    END CASE;

  END PROCESS Analog_Board_SPI_Controller_1_output;

  CSL_tmp <= CSL_reg_next;
  CLK_OUT <= CLK_OUT_reg_next;
  sig <= sig_reg_next;
  sig1 <= sig1_reg_next;
  SDI <= SDI_reg_next;

  CSL <= std_logic_vector(CSL_tmp);

END rtl;

