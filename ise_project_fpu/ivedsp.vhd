-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\ivedsp.vhd
-- Created: 2013-03-14 17:42:03
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ivedsp
-- Source Path: ivedsp
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ivedsp_pkg.ALL;

ENTITY ivedsp IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Timer_ISR                         :   IN    std_logic;
        Instruction                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        Data_RAM_in                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        result                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        BRAM_out                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        internal_in_1                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        internal_in_2                     :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        ADC_Input                         :   IN    vector_of_std_logic_vector8(0 TO 7);  -- uint8 [8]
        ce_out_0                          :   OUT   std_logic;
        ce_out_1                          :   OUT   std_logic;
        Instruction_address               :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        RAM_Addr                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        Data_RAM                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Write_RAM                         :   OUT   std_logic;
        op1                               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        op2                               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        op3                               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        trig_pack                         :   OUT   std_logic;
        select_mem                        :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        write_outram                      :   OUT   std_logic;
        data_outram                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        addr_outram                       :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
        internal_out_1                    :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        internal_out_2                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        BRAM_addr                         :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        DAC_Output                        :   OUT   vector_of_std_logic_vector8(0 TO 7)  -- uint8 [8]
        );
END ivedsp;


ARCHITECTURE rtl OF ivedsp IS

  -- Component Declarations
  COMPONENT Instruction_Decoder
    PORT( Instruction                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          LACC                            :   OUT   std_logic;
          SACC                            :   OUT   std_logic;
          MAC                             :   OUT   std_logic;
          JMP                             :   OUT   std_logic;
          instr_op                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
          SMS                             :   OUT   std_logic;
          RMI                             :   OUT   std_logic;
          IN_Port                         :   OUT   std_logic;
          OUT_Port                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IN_OUT_Controller
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          IN_rsvd                         :   IN    std_logic;
          OUT_rsvd                        :   IN    std_logic;
          BRAM_out                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          port_rsvd                       :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          ADC_Input                       :   IN    vector_of_std_logic_vector8(0 TO 7);  -- uint8 [8]
          PC_In                           :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          BRAM_addr                       :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
          PC_Out                          :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          Ready                           :   OUT   std_logic;
          write_outram                    :   OUT   std_logic;
          data_outram                     :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          addr_outram                     :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          DAC_Output                      :   OUT   vector_of_std_logic_vector8(0 TO 7)  -- uint8 [8]
          );
  END COMPONENT;

  COMPONENT alpha12_bit_Program_Counter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          new_addr                        :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          JMP                             :   IN    std_logic;
          MAC                             :   IN    std_logic;
          MAC_Ready                       :   IN    std_logic;
          IN_OUT                          :   IN    std_logic;
          IN_OUT_Ready                    :   IN    std_logic;
          Instr_addr                      :   OUT   std_logic_vector(11 DOWNTO 0)  -- ufix12
          );
  END COMPONENT;

  COMPONENT alpha32_bit_Acumulator_resource
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          ACC                             :   IN    std_logic;
          IN_rsvd                         :   IN    std_logic;
          data_in1                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          data_out                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Instruction_Decoder
    USE ENTITY work.Instruction_Decoder(rtl);

  FOR ALL : IN_OUT_Controller
    USE ENTITY work.IN_OUT_Controller(rtl);

  FOR ALL : alpha12_bit_Program_Counter
    USE ENTITY work.alpha12_bit_Program_Counter(rtl);

  FOR ALL : alpha32_bit_Acumulator_resource
    USE ENTITY work.alpha32_bit_Acumulator_resource(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Integer_Delay1_out1              : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Instruction_unsigned             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL JMP_0_out1                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Instruction_Decoder_out1         : std_logic;
  SIGNAL Instruction_Decoder_out2         : std_logic;
  SIGNAL Instruction_Decoder_out3         : std_logic;
  SIGNAL Instruction_Decoder_out4         : std_logic;
  SIGNAL Instruction_Decoder_out5         : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL Instruction_Decoder_out6         : std_logic;
  SIGNAL Instruction_Decoder_out7         : std_logic;
  SIGNAL Instruction_Decoder_out8         : std_logic;
  SIGNAL Instruction_Decoder_out9         : std_logic;
  SIGNAL Integer_Delay6_out1              : std_logic;
  SIGNAL Integer_Delay6_out1_1            : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Integer_Delay5_reg               : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Integer_Delay5_out1              : std_logic;
  SIGNAL Instruction_Decoder_out8_1       : std_logic;
  SIGNAL Instruction_Decoder_out5_unsigned : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Data_Type_Conversion3_out1       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL IN_OUT_Controller_out1           : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL IN_OUT_Controller_out2           : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL IN_OUT_Controller_out3           : std_logic;
  SIGNAL IN_OUT_Controller_out4           : std_logic;
  SIGNAL IN_OUT_Controller_out5           : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL IN_OUT_Controller_out6           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL IN_OUT_Controller_out7           : vector_of_std_logic_vector8(0 TO 7);  -- ufix8 [8]
  SIGNAL alpha12_bit_Program_Counter_out1 : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL Instruction_Decoder_out2_1       : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Integer_Delay2_out1              : std_logic;
  SIGNAL alpha32_bit_Acumulator_resource_out1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL alpha32_bit_Acumulator_resource_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL result_unsigned                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Integer_Delay3_out1              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FixPt_Constant3_out1             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Integer_Delay4_out1              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL data_sw2_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL data_sw1_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL data_sw_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Instruction_Decoder_out2_2       : std_logic;
  SIGNAL FixPt_Constant2_out1             : unsigned(3 DOWNTO 0);  -- ufix4

BEGIN
  u_Instruction_Decoder : Instruction_Decoder
    PORT MAP( Instruction => std_logic_vector(Switch_out1),  -- uint16
              LACC => Instruction_Decoder_out1,
              SACC => Instruction_Decoder_out2,
              MAC => Instruction_Decoder_out3,
              JMP => Instruction_Decoder_out4,
              instr_op => Instruction_Decoder_out5,  -- ufix12
              SMS => Instruction_Decoder_out6,
              RMI => Instruction_Decoder_out7,
              IN_Port => Instruction_Decoder_out8,
              OUT_Port => Instruction_Decoder_out9
              );

  u_IN_OUT_Controller : IN_OUT_Controller
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              IN_rsvd => Instruction_Decoder_out8,
              OUT_rsvd => Instruction_Decoder_out9,
              BRAM_out => BRAM_out,  -- uint8
              port_rsvd => std_logic_vector(Data_Type_Conversion3_out1),  -- ufix5
              ADC_Input => ADC_Input,  -- uint8 [8]
              PC_In => internal_in_2,  -- uint8 [4]
              BRAM_addr => IN_OUT_Controller_out1,  -- ufix11
              PC_Out => IN_OUT_Controller_out2,  -- uint8 [4]
              Ready => IN_OUT_Controller_out3,
              write_outram => IN_OUT_Controller_out4,
              data_outram => IN_OUT_Controller_out5,  -- uint8
              addr_outram => IN_OUT_Controller_out6,  -- ufix14
              DAC_Output => IN_OUT_Controller_out7  -- uint8 [8]
              );

  u_12_bit_Program_Counter : alpha12_bit_Program_Counter
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              new_addr => Instruction_Decoder_out5,  -- ufix12
              JMP => Instruction_Decoder_out4,
              MAC => Instruction_Decoder_out3,
              MAC_Ready => Integer_Delay5_out1,
              IN_OUT => Instruction_Decoder_out8_1,
              IN_OUT_Ready => IN_OUT_Controller_out3,
              Instr_addr => alpha12_bit_Program_Counter_out1  -- ufix12
              );

  u_32_bit_Acumulator_resource : alpha32_bit_Acumulator_resource
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              data_in => Data_RAM_in,  -- uint32
              ACC => Integer_Delay2_out1,
              IN_rsvd => Instruction_Decoder_out8,
              data_in1 => internal_in_1,  -- uint32
              data_out => alpha32_bit_Acumulator_resource_out1  -- uint32
              );

  enb <= clk_enable;

  Integer_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay1_out1 <= Timer_ISR;
      END IF;
    END IF;
  END PROCESS Integer_Delay1_process;


  
  switch_compare_1 <= '1' WHEN Integer_Delay1_out1 >= '1' ELSE
      '0';

  Instruction_unsigned <= unsigned(Instruction);

  JMP_0_out1 <= to_unsigned(20480, 16);

  
  Switch_out1 <= Instruction_unsigned WHEN switch_compare_1 = '0' ELSE
      JMP_0_out1;

  Integer_Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay6_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay6_out1 <= Instruction_Decoder_out3;
      END IF;
    END IF;
  END PROCESS Integer_Delay6_process;


  Integer_Delay6_out1_1 <=  NOT Integer_Delay6_out1;

  Logical_Operator3_out1 <= Integer_Delay6_out1_1 AND Instruction_Decoder_out3;

  Integer_Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay5_reg(0) <= Logical_Operator3_out1;
        Integer_Delay5_reg(1 TO 2) <= Integer_Delay5_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS Integer_Delay5_process;

  Integer_Delay5_out1 <= Integer_Delay5_reg(2);

  Instruction_Decoder_out8_1 <= Instruction_Decoder_out8 OR Instruction_Decoder_out9;

  Instruction_Decoder_out5_unsigned <= unsigned(Instruction_Decoder_out5);

  Data_Type_Conversion3_out1 <= Instruction_Decoder_out5_unsigned(4 DOWNTO 0);

  Instruction_address <= alpha12_bit_Program_Counter_out1;

  RAM_Addr <= Instruction_Decoder_out5;

  Instruction_Decoder_out2_1 <=  NOT Instruction_Decoder_out2;

  
  switch_compare_1_1 <= '1' WHEN Instruction_Decoder_out2_1 >= '1' ELSE
      '0';

  Integer_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay2_out1 <= Instruction_Decoder_out1;
      END IF;
    END IF;
  END PROCESS Integer_Delay2_process;


  alpha32_bit_Acumulator_resource_out1_unsigned <= unsigned(alpha32_bit_Acumulator_resource_out1);

  
  switch_compare_1_2 <= '1' WHEN Instruction_Decoder_out7 >= '1' ELSE
      '0';

  
  switch_compare_1_3 <= '1' WHEN Integer_Delay5_out1 >= '1' ELSE
      '0';

  result_unsigned <= unsigned(result);

  Integer_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay3_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay3_out1 <= result_unsigned;
      END IF;
    END IF;
  END PROCESS Integer_Delay3_process;


  FixPt_Constant3_out1 <= to_unsigned(0, 32);

  
  data_sw2_out1 <= Integer_Delay4_out1 WHEN switch_compare_1_3 = '0' ELSE
      Integer_Delay3_out1;

  
  data_sw1_out1 <= data_sw2_out1 WHEN switch_compare_1_2 = '0' ELSE
      FixPt_Constant3_out1;

  Integer_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay4_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay4_out1 <= data_sw1_out1;
      END IF;
    END IF;
  END PROCESS Integer_Delay4_process;


  
  data_sw_out1 <= alpha32_bit_Acumulator_resource_out1_unsigned WHEN switch_compare_1_1 = '0' ELSE
      Integer_Delay4_out1;

  Data_RAM <= std_logic_vector(data_sw_out1);

  Instruction_Decoder_out2_2 <= Instruction_Decoder_out2 OR Instruction_Decoder_out6;

  Write_RAM <= Instruction_Decoder_out2_2;

  op1 <= alpha32_bit_Acumulator_resource_out1;

  op2 <= Data_RAM_in;

  op3 <= std_logic_vector(Integer_Delay4_out1);

  trig_pack <= Timer_ISR;

  FixPt_Constant2_out1 <= to_unsigned(2, 4);

  select_mem <= std_logic_vector(FixPt_Constant2_out1);

  write_outram <= IN_OUT_Controller_out4;

  data_outram <= IN_OUT_Controller_out5;

  addr_outram <= IN_OUT_Controller_out6;

  internal_out_1 <= IN_OUT_Controller_out2;

  internal_out_2 <= alpha32_bit_Acumulator_resource_out1;

  BRAM_addr <= IN_OUT_Controller_out1;

  DAC_Output <= IN_OUT_Controller_out7;

  ce_out_0 <= clk_enable;

  ce_out_1 <= clk_enable;

END rtl;

