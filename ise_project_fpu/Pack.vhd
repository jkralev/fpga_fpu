-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_Test\ise_project_1\Pack.vhd
-- Created: 2012-11-16 23:00:40
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Pack
-- Source Path: contr1/Pack
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.contr1_pkg.ALL;

ENTITY Pack IS
  PORT( In1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        In2                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        In3                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        In4                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        Out1                              :   OUT   vector_of_std_logic_vector8(0 TO 1);  -- uint8 [2]
        Out2                              :   OUT   vector_of_std_logic_vector8(0 TO 1);  -- uint8 [2]
        Out3                              :   OUT   vector_of_std_logic_vector8(0 TO 1);  -- uint8 [2]
        Out4                              :   OUT   vector_of_std_logic_vector8(0 TO 1)  -- uint8 [2]
        );
END Pack;


ARCHITECTURE rtl OF Pack IS

  -- Signals
  SIGNAL In1_signed                       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Data_Type_Conversion5_out1       : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Gain1_cast                       : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Gain1_out1                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Data_Type_Conversion9_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic3_out1           : signed(15 DOWNTO 0);  -- int16
  SIGNAL Data_Type_Conversion10_out1      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux1_out1                        : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL In2_signed                       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Data_Type_Conversion2_out1       : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Gain2_cast                       : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Gain2_out1                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Data_Type_Conversion3_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic1_out1           : signed(15 DOWNTO 0);  -- int16
  SIGNAL Data_Type_Conversion1_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux2_out1                        : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL In3_signed                       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Data_Type_Conversion6_out1       : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Gain3_cast                       : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Gain3_out1                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Data_Type_Conversion7_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic2_out1           : signed(15 DOWNTO 0);  -- int16
  SIGNAL Data_Type_Conversion4_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux3_out1                        : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL In4_signed                       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Data_Type_Conversion11_out1      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Gain4_cast                       : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Gain4_out1                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Data_Type_Conversion12_out1      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic4_out1           : signed(15 DOWNTO 0);  -- int16
  SIGNAL Data_Type_Conversion8_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux4_out1                        : vector_of_unsigned8(0 TO 1);  -- uint8 [2]

BEGIN
  In1_signed <= signed(In1);

  
  Data_Type_Conversion5_out1 <= "0111111111111111" WHEN (In1_signed(31) = '0') AND (In1_signed(30 DOWNTO 16) /= "000000000000000") ELSE
      "1000000000000000" WHEN (In1_signed(31) = '1') AND (In1_signed(30 DOWNTO 16) /= "111111111111111") ELSE
      In1_signed(16 DOWNTO 1);

  Gain1_cast <= resize(Data_Type_Conversion5_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  
  Gain1_out1 <= "0111111111111111" WHEN (Gain1_cast(31) = '0') AND (Gain1_cast(30 DOWNTO 29) /= "00") ELSE
      "1000000000000000" WHEN (Gain1_cast(31) = '1') AND (Gain1_cast(30 DOWNTO 29) /= "11") ELSE
      Gain1_cast(29 DOWNTO 14);

  Data_Type_Conversion9_out1 <= unsigned(Gain1_out1(7 DOWNTO 0));

  Shift_Arithmetic3_out1 <= SHIFT_RIGHT(Gain1_out1 , 8);

  Data_Type_Conversion10_out1 <= unsigned(Shift_Arithmetic3_out1(7 DOWNTO 0));

  Mux1_out1(0) <= Data_Type_Conversion9_out1;
  Mux1_out1(1) <= Data_Type_Conversion10_out1;

  outputgen3: FOR k IN 0 TO 1 GENERATE
    Out1(k) <= std_logic_vector(Mux1_out1(k));
  END GENERATE;

  In2_signed <= signed(In2);

  
  Data_Type_Conversion2_out1 <= "0111111111111111" WHEN (In2_signed(31) = '0') AND (In2_signed(30 DOWNTO 16) /= "000000000000000") ELSE
      "1000000000000000" WHEN (In2_signed(31) = '1') AND (In2_signed(30 DOWNTO 16) /= "111111111111111") ELSE
      In2_signed(16 DOWNTO 1);

  Gain2_cast <= resize(Data_Type_Conversion2_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  
  Gain2_out1 <= "0111111111111111" WHEN (Gain2_cast(31) = '0') AND (Gain2_cast(30 DOWNTO 29) /= "00") ELSE
      "1000000000000000" WHEN (Gain2_cast(31) = '1') AND (Gain2_cast(30 DOWNTO 29) /= "11") ELSE
      Gain2_cast(29 DOWNTO 14);

  Data_Type_Conversion3_out1 <= unsigned(Gain2_out1(7 DOWNTO 0));

  Shift_Arithmetic1_out1 <= SHIFT_RIGHT(Gain2_out1 , 8);

  Data_Type_Conversion1_out1 <= unsigned(Shift_Arithmetic1_out1(7 DOWNTO 0));

  Mux2_out1(0) <= Data_Type_Conversion3_out1;
  Mux2_out1(1) <= Data_Type_Conversion1_out1;

  outputgen2: FOR k IN 0 TO 1 GENERATE
    Out2(k) <= std_logic_vector(Mux2_out1(k));
  END GENERATE;

  In3_signed <= signed(In3);

  
  Data_Type_Conversion6_out1 <= "0111111111111111" WHEN (In3_signed(31) = '0') AND (In3_signed(30 DOWNTO 16) /= "000000000000000") ELSE
      "1000000000000000" WHEN (In3_signed(31) = '1') AND (In3_signed(30 DOWNTO 16) /= "111111111111111") ELSE
      In3_signed(16 DOWNTO 1);

  Gain3_cast <= resize(Data_Type_Conversion6_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  
  Gain3_out1 <= "0111111111111111" WHEN (Gain3_cast(31) = '0') AND (Gain3_cast(30 DOWNTO 29) /= "00") ELSE
      "1000000000000000" WHEN (Gain3_cast(31) = '1') AND (Gain3_cast(30 DOWNTO 29) /= "11") ELSE
      Gain3_cast(29 DOWNTO 14);

  Data_Type_Conversion7_out1 <= unsigned(Gain3_out1(7 DOWNTO 0));

  Shift_Arithmetic2_out1 <= SHIFT_RIGHT(Gain3_out1 , 8);

  Data_Type_Conversion4_out1 <= unsigned(Shift_Arithmetic2_out1(7 DOWNTO 0));

  Mux3_out1(0) <= Data_Type_Conversion7_out1;
  Mux3_out1(1) <= Data_Type_Conversion4_out1;

  outputgen1: FOR k IN 0 TO 1 GENERATE
    Out3(k) <= std_logic_vector(Mux3_out1(k));
  END GENERATE;

  In4_signed <= signed(In4);

  
  Data_Type_Conversion11_out1 <= "0111111111111111" WHEN (In4_signed(31) = '0') AND (In4_signed(30 DOWNTO 16) /= "000000000000000") ELSE
      "1000000000000000" WHEN (In4_signed(31) = '1') AND (In4_signed(30 DOWNTO 16) /= "111111111111111") ELSE
      In4_signed(16 DOWNTO 1);

  Gain4_cast <= resize(Data_Type_Conversion11_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  
  Gain4_out1 <= "0111111111111111" WHEN (Gain4_cast(31) = '0') AND (Gain4_cast(30 DOWNTO 29) /= "00") ELSE
      "1000000000000000" WHEN (Gain4_cast(31) = '1') AND (Gain4_cast(30 DOWNTO 29) /= "11") ELSE
      Gain4_cast(29 DOWNTO 14);

  Data_Type_Conversion12_out1 <= unsigned(Gain4_out1(7 DOWNTO 0));

  Shift_Arithmetic4_out1 <= SHIFT_RIGHT(Gain4_out1 , 8);

  Data_Type_Conversion8_out1 <= unsigned(Shift_Arithmetic4_out1(7 DOWNTO 0));

  Mux4_out1(0) <= Data_Type_Conversion12_out1;
  Mux4_out1(1) <= Data_Type_Conversion8_out1;

  outputgen: FOR k IN 0 TO 1 GENERATE
    Out4(k) <= std_logic_vector(Mux4_out1(k));
  END GENERATE;

END rtl;

