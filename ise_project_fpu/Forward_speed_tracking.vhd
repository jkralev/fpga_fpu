-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_Test\ise_project_1\Forward_speed_tracking.vhd
-- Created: 2012-11-05 22:45:21
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Forward_speed_tracking
-- Source Path: ss_controller/Forward speed tracking
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ss_controller_pkg.ALL;

ENTITY Forward_speed_tracking IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Tick                              :   IN    std_logic;
        u                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En20
        y                                 :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En20
        );
END Forward_speed_tracking;


ARCHITECTURE rtl OF Forward_speed_tracking IS

  -- Component Declarations
  COMPONENT MAC_instruction
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          mul1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En20
          mul2                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En20
          reset_1                         :   IN    std_logic;
          result                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En20
          );
  END COMPONENT;

  COMPONENT MAC_instruction_Controller1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sys                             :   IN    vector_of_std_logic_vector32(0 TO 4);  -- sfix32_En20 [5]
          xu                              :   IN    vector_of_std_logic_vector32(0 TO 4);  -- sfix32_En20 [5]
          result                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En20
          Model_Tick                      :   IN    std_logic;
          mul1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En20
          mul2                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En20
          reset_1                         :   OUT   std_logic;
          xy                              :   OUT   vector_of_std_logic_vector32(0 TO 3)  -- sfix32_En20 [4]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : MAC_instruction
    USE ENTITY work.MAC_instruction(rtl);

  FOR ALL : MAC_instruction_Controller1
    USE ENTITY work.MAC_instruction_Controller1(rtl);

  -- Signals
  SIGNAL Parameters_out1                  : vector_of_signed32(0 TO 4);  -- sfix32_En20 [5]
  SIGNAL Parameters_out1_1                : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL MAC_instruction_Controller1_out1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL MAC_instruction_Controller1_out2 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL MAC_instruction_Controller1_out3 : std_logic;
  SIGNAL MAC_instruction_out1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL u_old_out1                       : vector_of_signed32(0 TO 1);  -- sfix32_En20 [2]
  SIGNAL MAC_instruction_Controller1_out4 : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL y2_out1                          : vector_of_signed32(0 TO 1);  -- sfix32_En20 [2]
  SIGNAL y_old_out1                       : vector_of_signed32(0 TO 1);  -- sfix32_En20 [2]
  SIGNAL y1_out1                          : vector_of_signed32(0 TO 1);  -- sfix32_En20 [2]
  SIGNAL Mux_out1                         : vector_of_signed32(0 TO 4);  -- sfix32_En20 [5]
  SIGNAL Mux_out1_1                       : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]

BEGIN
  -- Relizaciq na diskretna predavatelna
  -- funkciq ot vida: W=k0(z-a1)(z-a2)/((z-b1)(z-b2)).
  -- 
  -- Izhoda v momenta k se izchislqva po formulata:
  -- y(k)=(b1+b2)y(k-1)-b1b2y(k-2)+k0u(k)-k0(a1+a2)u(k-1)+k0a1a2u(k-2)

  u_MAC_instruction : MAC_instruction
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              mul1 => MAC_instruction_Controller1_out1,  -- sfix32_En20
              mul2 => MAC_instruction_Controller1_out2,  -- sfix32_En20
              reset_1 => MAC_instruction_Controller1_out3,
              result => MAC_instruction_out1  -- sfix32_En20
              );

  u_MAC_instruction_Controller1 : MAC_instruction_Controller1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sys => Parameters_out1_1,  -- sfix32_En20 [5]
              xu => Mux_out1_1,  -- sfix32_En20 [5]
              result => MAC_instruction_out1,  -- sfix32_En20
              Model_Tick => Tick,
              mul1 => MAC_instruction_Controller1_out1,  -- sfix32_En20
              mul2 => MAC_instruction_Controller1_out2,  -- sfix32_En20
              reset_1 => MAC_instruction_Controller1_out3,
              xy => MAC_instruction_Controller1_out4  -- sfix32_En20 [4]
              );

  Parameters_out1(0) <= to_signed(1398066, 32);
  Parameters_out1(1) <= to_signed(-349490, 32);
  Parameters_out1(2) <= to_signed(1572864, 32);
  Parameters_out1(3) <= to_signed(-3123708, 32);
  Parameters_out1(4) <= to_signed(1550907, 32);

  outputgen1: FOR k IN 0 TO 4 GENERATE
    Parameters_out1_1(k) <= std_logic_vector(Parameters_out1(k));
  END GENERATE;

  y2_out1(0) <= signed(MAC_instruction_Controller1_out4(2));
  y2_out1(1) <= signed(MAC_instruction_Controller1_out4(3));

  u_old_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      u_old_out1 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        u_old_out1 <= y2_out1;
      END IF;
    END IF;
  END PROCESS u_old_process;


  y1_out1(0) <= signed(MAC_instruction_Controller1_out4(0));
  y1_out1(1) <= signed(MAC_instruction_Controller1_out4(1));

  y_old_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_old_out1 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y_old_out1 <= y1_out1;
      END IF;
    END IF;
  END PROCESS y_old_process;


  Mux_out1(0) <= y_old_out1(0);
  Mux_out1(1) <= y_old_out1(1);
  Mux_out1(2) <= signed(u);
  Mux_out1(3) <= u_old_out1(0);
  Mux_out1(4) <= u_old_out1(1);

  outputgen: FOR k IN 0 TO 4 GENERATE
    Mux_out1_1(k) <= std_logic_vector(Mux_out1(k));
  END GENERATE;

  y <= MAC_instruction_Controller1_out4(0);

END rtl;

