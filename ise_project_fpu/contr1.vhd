-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\contr1.vhd
-- Created: 2012-12-12 09:55:26
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: contr1
-- Source Path: contr1
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.contr1_pkg.ALL;

ENTITY contr1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Read_event                        :   IN    std_logic;
        BRAM_out                          :   IN    std_logic_vector(0 TO 7);  -- boolean [8]
        u1                                :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        u2                                :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        u3                                :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        u4                                :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        ce_out                            :   OUT   std_logic;
        led_0                             :   OUT   std_logic;
        BRAM_addr                         :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        BRAM_en                           :   OUT   std_logic;
        trig_pack                         :   OUT   std_logic;
        select_mem                        :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        pack_size                         :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        resp                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        AOffset                           :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
        Param                             :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        write_outram                      :   OUT   std_logic;
        data_outram                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        addr_outram                       :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
        start                             :   OUT   std_logic;
        y1                                :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        y2                                :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        y3                                :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        y4                                :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        y5                                :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        y6                                :   OUT   vector_of_std_logic_vector8(0 TO 3)  -- uint8 [4]
        );
END contr1;


ARCHITECTURE rtl OF contr1 IS

  -- Component Declarations
  COMPONENT alpha8bit2uint8
    PORT( u                               :   IN    vector_of_std_logic_vector8(0 TO 7);  -- uint8 [8]
          y                               :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Handle_command
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          read_ev                         :   IN    std_logic;
          BRAM_out                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          PC_In_1                         :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          PC_In_2                         :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          PC_In_3                         :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          PC_In_4                         :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          BRAM_en                         :   OUT   std_logic;
          BRAM_addr                       :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
          led                             :   OUT   std_logic;
          trig_pack                       :   OUT   std_logic;
          select_mem                      :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
          crespond                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          psize                           :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
          AOffset                         :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          Param                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          write_ram                       :   OUT   std_logic;
          data_ram                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          addr_ram                        :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          PC_Out_1                        :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          PC_Out_2                        :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          PC_Out_3                        :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          PC_Out_4                        :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          PC_Out_5                        :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          PC_Out_6                        :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          start                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : alpha8bit2uint8
    USE ENTITY work.alpha8bit2uint8(rtl);

  FOR ALL : Handle_command
    USE ENTITY work.Handle_command(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL u1_unsigned                      : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL u2_unsigned                      : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL u3_unsigned                      : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL u4_unsigned                      : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Integer_Delay4_out1              : std_logic;
  SIGNAL Data_Type_Conversion1_out1       : vector_of_unsigned8(0 TO 7);  -- uint8 [8]
  SIGNAL Data_Type_Conversion1_out1_1     : vector_of_std_logic_vector8(0 TO 7);  -- ufix8 [8]
  SIGNAL alpha8bit2uint8_out1             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Integer_Delay1_out1              : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Integer_Delay1_out1_1            : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL Integer_Delay2_out1              : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Integer_Delay2_out1_1            : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL Integer_Delay3_out1              : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Integer_Delay3_out1_1            : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL Integer_Delay5_out1              : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Integer_Delay5_out1_1            : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL Handle_command_out1              : std_logic;
  SIGNAL Handle_command_out2              : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL Handle_command_out3              : std_logic;
  SIGNAL Handle_command_out4              : std_logic;
  SIGNAL Handle_command_out5              : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL Handle_command_out6              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Handle_command_out7              : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL Handle_command_out8              : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL Handle_command_out9              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Handle_command_out10             : std_logic;
  SIGNAL Handle_command_out11             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Handle_command_out12             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL Handle_command_out13             : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL Handle_command_out14             : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL Handle_command_out15             : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL Handle_command_out16             : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL Handle_command_out17             : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL Handle_command_out18             : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL Handle_command_out19             : std_logic;
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL Handle_command_out19_1           : std_logic;
  SIGNAL Handle_command_out13_unsigned    : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Integer_Delay6_out1              : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Handle_command_out14_unsigned    : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Integer_Delay7_out1              : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Handle_command_out15_unsigned    : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Integer_Delay8_out1              : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Handle_command_out16_unsigned    : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Integer_Delay9_out1              : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Handle_command_out17_unsigned    : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Integer_Delay10_out1             : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Handle_command_out18_unsigned    : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Integer_Delay11_out1             : vector_of_unsigned8(0 TO 3);  -- uint8 [4]

BEGIN
  u_8bit2uint8 : alpha8bit2uint8
    PORT MAP( u => Data_Type_Conversion1_out1_1,  -- uint8 [8]
              y => alpha8bit2uint8_out1  -- uint8
              );

  u_Handle_command : Handle_command
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              read_ev => Integer_Delay4_out1,
              BRAM_out => alpha8bit2uint8_out1,  -- uint8
              PC_In_1 => Integer_Delay1_out1_1,  -- uint8 [4]
              PC_In_2 => Integer_Delay2_out1_1,  -- uint8 [4]
              PC_In_3 => Integer_Delay3_out1_1,  -- uint8 [4]
              PC_In_4 => Integer_Delay5_out1_1,  -- uint8 [4]
              BRAM_en => Handle_command_out1,
              BRAM_addr => Handle_command_out2,  -- ufix11
              led => Handle_command_out3,
              trig_pack => Handle_command_out4,
              select_mem => Handle_command_out5,  -- ufix4
              crespond => Handle_command_out6,  -- uint8
              psize => Handle_command_out7,  -- ufix11
              AOffset => Handle_command_out8,  -- ufix14
              Param => Handle_command_out9,  -- uint8
              write_ram => Handle_command_out10,
              data_ram => Handle_command_out11,  -- uint8
              addr_ram => Handle_command_out12,  -- ufix14
              PC_Out_1 => Handle_command_out13,  -- uint8 [4]
              PC_Out_2 => Handle_command_out14,  -- uint8 [4]
              PC_Out_3 => Handle_command_out15,  -- uint8 [4]
              PC_Out_4 => Handle_command_out16,  -- uint8 [4]
              PC_Out_5 => Handle_command_out17,  -- uint8 [4]
              PC_Out_6 => Handle_command_out18,  -- uint8 [4]
              start => Handle_command_out19
              );

  enb <= clk_enable;

  outputgen20: FOR k IN 0 TO 3 GENERATE
    u1_unsigned(k) <= unsigned(u1(k));
  END GENERATE;

  outputgen19: FOR k IN 0 TO 3 GENERATE
    u2_unsigned(k) <= unsigned(u2(k));
  END GENERATE;

  outputgen18: FOR k IN 0 TO 3 GENERATE
    u3_unsigned(k) <= unsigned(u3(k));
  END GENERATE;

  outputgen17: FOR k IN 0 TO 3 GENERATE
    u4_unsigned(k) <= unsigned(u4(k));
  END GENERATE;

  Integer_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay4_out1 <= Read_event;
      END IF;
    END IF;
  END PROCESS Integer_Delay4_process;



  Data_Type_Conversion1_out1_gen: FOR ii IN 0 TO 7 GENERATE
    Data_Type_Conversion1_out1(ii) <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & BRAM_out(ii);
  END GENERATE Data_Type_Conversion1_out1_gen;


  outputgen16: FOR k IN 0 TO 7 GENERATE
    Data_Type_Conversion1_out1_1(k) <= std_logic_vector(Data_Type_Conversion1_out1(k));
  END GENERATE;

  Integer_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay1_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay1_out1 <= u1_unsigned;
      END IF;
    END IF;
  END PROCESS Integer_Delay1_process;


  outputgen15: FOR k IN 0 TO 3 GENERATE
    Integer_Delay1_out1_1(k) <= std_logic_vector(Integer_Delay1_out1(k));
  END GENERATE;

  Integer_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay2_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay2_out1 <= u2_unsigned;
      END IF;
    END IF;
  END PROCESS Integer_Delay2_process;


  outputgen14: FOR k IN 0 TO 3 GENERATE
    Integer_Delay2_out1_1(k) <= std_logic_vector(Integer_Delay2_out1(k));
  END GENERATE;

  Integer_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay3_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay3_out1 <= u3_unsigned;
      END IF;
    END IF;
  END PROCESS Integer_Delay3_process;


  outputgen13: FOR k IN 0 TO 3 GENERATE
    Integer_Delay3_out1_1(k) <= std_logic_vector(Integer_Delay3_out1(k));
  END GENERATE;

  Integer_Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay5_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay5_out1 <= u4_unsigned;
      END IF;
    END IF;
  END PROCESS Integer_Delay5_process;


  outputgen12: FOR k IN 0 TO 3 GENERATE
    Integer_Delay5_out1_1(k) <= std_logic_vector(Integer_Delay5_out1(k));
  END GENERATE;

  led_0 <= Handle_command_out3;

  BRAM_addr <= Handle_command_out2;

  BRAM_en <= Handle_command_out1;

  trig_pack <= Handle_command_out4;

  select_mem <= Handle_command_out5;

  pack_size <= Handle_command_out7;

  resp <= Handle_command_out6;

  AOffset <= Handle_command_out8;

  Param <= Handle_command_out9;

  write_outram <= Handle_command_out10;

  data_outram <= Handle_command_out11;

  addr_outram <= Handle_command_out12;

  Handle_command_out19_1 <= Handle_command_out19 OR Unit_Delay_out1;

  Unit_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_out1 <= Handle_command_out19_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  start <= Unit_Delay_out1;

  outputgen11: FOR k IN 0 TO 3 GENERATE
    Handle_command_out13_unsigned(k) <= unsigned(Handle_command_out13(k));
  END GENERATE;

  Integer_Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay6_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay6_out1 <= Handle_command_out13_unsigned;
      END IF;
    END IF;
  END PROCESS Integer_Delay6_process;


  outputgen10: FOR k IN 0 TO 3 GENERATE
    y1(k) <= std_logic_vector(Integer_Delay6_out1(k));
  END GENERATE;

  outputgen9: FOR k IN 0 TO 3 GENERATE
    Handle_command_out14_unsigned(k) <= unsigned(Handle_command_out14(k));
  END GENERATE;

  Integer_Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay7_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay7_out1 <= Handle_command_out14_unsigned;
      END IF;
    END IF;
  END PROCESS Integer_Delay7_process;


  outputgen8: FOR k IN 0 TO 3 GENERATE
    y2(k) <= std_logic_vector(Integer_Delay7_out1(k));
  END GENERATE;

  outputgen7: FOR k IN 0 TO 3 GENERATE
    Handle_command_out15_unsigned(k) <= unsigned(Handle_command_out15(k));
  END GENERATE;

  Integer_Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay8_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay8_out1 <= Handle_command_out15_unsigned;
      END IF;
    END IF;
  END PROCESS Integer_Delay8_process;


  outputgen6: FOR k IN 0 TO 3 GENERATE
    y3(k) <= std_logic_vector(Integer_Delay8_out1(k));
  END GENERATE;

  outputgen5: FOR k IN 0 TO 3 GENERATE
    Handle_command_out16_unsigned(k) <= unsigned(Handle_command_out16(k));
  END GENERATE;

  Integer_Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay9_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay9_out1 <= Handle_command_out16_unsigned;
      END IF;
    END IF;
  END PROCESS Integer_Delay9_process;


  outputgen4: FOR k IN 0 TO 3 GENERATE
    y4(k) <= std_logic_vector(Integer_Delay9_out1(k));
  END GENERATE;

  outputgen3: FOR k IN 0 TO 3 GENERATE
    Handle_command_out17_unsigned(k) <= unsigned(Handle_command_out17(k));
  END GENERATE;

  Integer_Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay10_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay10_out1 <= Handle_command_out17_unsigned;
      END IF;
    END IF;
  END PROCESS Integer_Delay10_process;


  outputgen2: FOR k IN 0 TO 3 GENERATE
    y5(k) <= std_logic_vector(Integer_Delay10_out1(k));
  END GENERATE;

  outputgen1: FOR k IN 0 TO 3 GENERATE
    Handle_command_out18_unsigned(k) <= unsigned(Handle_command_out18(k));
  END GENERATE;

  Integer_Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay11_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay11_out1 <= Handle_command_out18_unsigned;
      END IF;
    END IF;
  END PROCESS Integer_Delay11_process;


  outputgen: FOR k IN 0 TO 3 GENERATE
    y6(k) <= std_logic_vector(Integer_Delay11_out1(k));
  END GENERATE;

  ce_out <= clk_enable;

END rtl;

