-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\rom1.vhd
-- Created: 2013-02-08 12:34:45
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rom1
-- Source Path: rom1
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rom1_pkg.ALL;

ENTITY rom1 IS
  PORT( Address                           :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
        Select_mem                        :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        Data_out1                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Data                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        Address2                          :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
        );
END rom1;


ARCHITECTURE rtl OF rom1 IS

  -- Signals
  SIGNAL Address_unsigned                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant11_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant1_out1_1      : std_logic;
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant13_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant2_out1_1      : std_logic;
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Constant15_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant4_out1        : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Constant17_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Constant5_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant5_out1_dtc               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Preamble_out1                    : vector_of_unsigned8(0 TO 6);  -- uint8 [7]
  SIGNAL SOF_out1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Destination_physical_address_out1 : vector_of_unsigned8(0 TO 5);  -- uint8 [6]
  SIGNAL Source_physical_address_out1     : vector_of_unsigned8(0 TO 5);  -- uint8 [6]
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL Constant6_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant6_out1_dtc               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant7_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL IP_Protocol_out1                 : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL IPHeader1_out1                   : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL pack_size_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant22_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add6_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add6_sub_cast_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add6_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add6_out1                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Shift_Arithmetic1_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL bitMask_for_Bitwise_Operator3    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bitwise_Operator3_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL bitMask_for_Bitwise_Operator2    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bitwise_Operator2_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL UDP_length1_out1                 : vector_of_unsigned16(0 TO 1);  -- uint16 [2]
  SIGNAL Data_Type_Conversion5_out1       : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL IPHeader2_out1                   : vector_of_unsigned8(0 TO 5);  -- uint8 [6]
  SIGNAL IPChecksum_out1                  : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL IPSource_out1                    : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL IPDestination_out1               : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL Constant8_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant8_out1_dtc               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant9_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL UDP_port_src_out1                : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL UDP_port_dest_out1               : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL Constant1_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add5_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add5_sub_cast_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add5_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add5_out1                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Shift_Arithmetic_out1            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL bitMask_for_Bitwise_Operator1    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bitwise_Operator1_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL bitMask_for_Bitwise_Operator     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bitwise_Operator_out1            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL UDP_length_out1                  : vector_of_unsigned16(0 TO 1);  -- uint16 [2]
  SIGNAL Data_Type_Conversion_out1        : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL UDP_checksum_out1                : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL Constant12_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch6_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant14_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch7_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant16_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch8_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant18_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch9_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add3_add_temp                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Add3_add_temp_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Add3_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch3_out1                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Data_Type_Conversion1_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Ethernet_header_out1             : vector_of_unsigned8(0 TO 19);  -- uint8 [20]
  SIGNAL Ethernet_selector_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add1_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_sub_cast_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch4_out1                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion2_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL IP_header_out1                   : vector_of_unsigned8(0 TO 21);  -- uint8 [22]
  SIGNAL IP_header_selector_out1          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add2_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_sub_cast_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch5_out1                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion3_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL UDP_header_out1                  : vector_of_unsigned8(0 TO 7);  -- uint8 [8]
  SIGNAL UDP_header_selector_out1         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Data_out1_unsigned               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant3_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Multiport_Switch1_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL Constant19_out1                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Constant20_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add4_out1                        : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Switch10_out1                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Select_mem_unsigned              : unsigned(3 DOWNTO 0);  -- ufix4

BEGIN
  Address_unsigned <= unsigned(Address);

  
  Compare_To_Constant1_out1 <= '1' WHEN Address_unsigned < 20 ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN Compare_To_Constant1_out1 > '0' ELSE
      '0';

  Constant11_out1 <= to_unsigned(0, 8);

  Compare_To_Constant1_out1_1 <=  NOT Compare_To_Constant1_out1;

  
  Compare_To_Constant2_out1 <= '1' WHEN Address_unsigned < 42 ELSE
      '0';

  Logical_Operator1_out1 <= Compare_To_Constant1_out1_1 AND Compare_To_Constant2_out1;

  
  switch_compare_1_1 <= '1' WHEN Logical_Operator1_out1 > '0' ELSE
      '0';

  Constant13_out1 <= to_unsigned(0, 8);

  Compare_To_Constant2_out1_1 <=  NOT Compare_To_Constant2_out1;

  
  Compare_To_Constant3_out1 <= '1' WHEN Address_unsigned < 50 ELSE
      '0';

  Logical_Operator3_out1 <= Compare_To_Constant2_out1_1 AND Compare_To_Constant3_out1;

  
  switch_compare_1_2 <= '1' WHEN Logical_Operator3_out1 > '0' ELSE
      '0';

  Constant15_out1 <= to_unsigned(0, 8);

  
  Compare_To_Constant4_out1 <= '1' WHEN Address_unsigned >= 50 ELSE
      '0';

  
  switch_compare_1_3 <= '1' WHEN Compare_To_Constant4_out1 > '0' ELSE
      '0';

  Constant17_out1 <= to_unsigned(0, 8);

  
  switch_compare_1_4 <= '1' WHEN Compare_To_Constant1_out1 > '0' ELSE
      '0';

  Constant5_out1 <= to_unsigned(0, 8);

  Constant5_out1_dtc <= resize(Constant5_out1, 11);

  Preamble_out1(0) <= to_unsigned(85, 8);
  Preamble_out1(1) <= to_unsigned(85, 8);
  Preamble_out1(2) <= to_unsigned(85, 8);
  Preamble_out1(3) <= to_unsigned(85, 8);
  Preamble_out1(4) <= to_unsigned(85, 8);
  Preamble_out1(5) <= to_unsigned(85, 8);
  Preamble_out1(6) <= to_unsigned(85, 8);

  SOF_out1 <= to_unsigned(213, 8);

  Destination_physical_address_out1(0) <= to_unsigned(208, 8);
  Destination_physical_address_out1(1) <= to_unsigned(39, 8);
  Destination_physical_address_out1(2) <= to_unsigned(136, 8);
  Destination_physical_address_out1(3) <= to_unsigned(161, 8);
  Destination_physical_address_out1(4) <= to_unsigned(66, 8);
  Destination_physical_address_out1(5) <= to_unsigned(128, 8);

  Source_physical_address_out1(0) <= to_unsigned(0, 8);
  Source_physical_address_out1(1) <= to_unsigned(25, 8);
  Source_physical_address_out1(2) <= to_unsigned(219, 8);
  Source_physical_address_out1(3) <= to_unsigned(234, 8);
  Source_physical_address_out1(4) <= to_unsigned(104, 8);
  Source_physical_address_out1(5) <= to_unsigned(10, 8);

  
  switch_compare_1_5 <= '1' WHEN Logical_Operator1_out1 > '0' ELSE
      '0';

  Constant6_out1 <= to_unsigned(0, 8);

  Constant6_out1_dtc <= resize(Constant6_out1, 16);

  Constant7_out1 <= to_unsigned(20, 8);

  IP_Protocol_out1(0) <= to_unsigned(8, 8);
  IP_Protocol_out1(1) <= to_unsigned(0, 8);

  IPHeader1_out1(0) <= to_unsigned(69, 8);
  IPHeader1_out1(1) <= to_unsigned(0, 8);

  pack_size_out1 <= to_unsigned(168, 8);

  Constant22_out1 <= to_unsigned(22, 8);

  Add6_sub_cast <= signed(resize(pack_size_out1, 32));
  Add6_sub_cast_1 <= signed(resize(Constant22_out1, 32));
  Add6_sub_temp <= Add6_sub_cast - Add6_sub_cast_1;
  Add6_out1 <= unsigned(Add6_sub_temp(15 DOWNTO 0));

  Shift_Arithmetic1_out1 <= Add6_out1 srl 8;

  bitMask_for_Bitwise_Operator3 <= to_unsigned(255, 16);

  Bitwise_Operator3_out1 <= Shift_Arithmetic1_out1 AND bitMask_for_Bitwise_Operator3;

  bitMask_for_Bitwise_Operator2 <= to_unsigned(255, 16);

  Bitwise_Operator2_out1 <= Add6_out1 AND bitMask_for_Bitwise_Operator2;

  UDP_length1_out1(0) <= Bitwise_Operator3_out1;
  UDP_length1_out1(1) <= Bitwise_Operator2_out1;


  Data_Type_Conversion5_out1_gen: FOR ii IN 0 TO 1 GENERATE
    Data_Type_Conversion5_out1(ii) <= UDP_length1_out1(ii)(7 DOWNTO 0);
  END GENERATE Data_Type_Conversion5_out1_gen;


  IPHeader2_out1(0) <= to_unsigned(0, 8);
  IPHeader2_out1(1) <= to_unsigned(0, 8);
  IPHeader2_out1(2) <= to_unsigned(0, 8);
  IPHeader2_out1(3) <= to_unsigned(0, 8);
  IPHeader2_out1(4) <= to_unsigned(128, 8);
  IPHeader2_out1(5) <= to_unsigned(17, 8);

  IPChecksum_out1(0) <= to_unsigned(180, 8);
  IPChecksum_out1(1) <= to_unsigned(254, 8);

  IPSource_out1(0) <= to_unsigned(193, 8);
  IPSource_out1(1) <= to_unsigned(168, 8);
  IPSource_out1(2) <= to_unsigned(1, 8);
  IPSource_out1(3) <= to_unsigned(10, 8);

  IPDestination_out1(0) <= to_unsigned(193, 8);
  IPDestination_out1(1) <= to_unsigned(168, 8);
  IPDestination_out1(2) <= to_unsigned(1, 8);
  IPDestination_out1(3) <= to_unsigned(2, 8);

  
  switch_compare_1_6 <= '1' WHEN Logical_Operator3_out1 > '0' ELSE
      '0';

  Constant8_out1 <= to_unsigned(0, 8);

  Constant8_out1_dtc <= resize(Constant8_out1, 16);

  Constant9_out1 <= to_unsigned(42, 8);

  UDP_port_src_out1(0) <= to_unsigned(4, 8);
  UDP_port_src_out1(1) <= to_unsigned(0, 8);

  UDP_port_dest_out1(0) <= to_unsigned(4, 8);
  UDP_port_dest_out1(1) <= to_unsigned(0, 8);

  Constant1_out1 <= to_unsigned(42, 8);

  Add5_sub_cast <= signed(resize(pack_size_out1, 32));
  Add5_sub_cast_1 <= signed(resize(Constant1_out1, 32));
  Add5_sub_temp <= Add5_sub_cast - Add5_sub_cast_1;
  Add5_out1 <= unsigned(Add5_sub_temp(15 DOWNTO 0));

  Shift_Arithmetic_out1 <= Add5_out1 srl 8;

  bitMask_for_Bitwise_Operator1 <= to_unsigned(255, 16);

  Bitwise_Operator1_out1 <= Shift_Arithmetic_out1 AND bitMask_for_Bitwise_Operator1;

  bitMask_for_Bitwise_Operator <= to_unsigned(255, 16);

  Bitwise_Operator_out1 <= Add5_out1 AND bitMask_for_Bitwise_Operator;

  UDP_length_out1(0) <= Bitwise_Operator1_out1;
  UDP_length_out1(1) <= Bitwise_Operator_out1;


  Data_Type_Conversion_out1_gen: FOR ii1 IN 0 TO 1 GENERATE
    Data_Type_Conversion_out1(ii1) <= UDP_length_out1(ii1)(7 DOWNTO 0);
  END GENERATE Data_Type_Conversion_out1_gen;


  UDP_checksum_out1(0) <= to_unsigned(0, 8);
  UDP_checksum_out1(1) <= to_unsigned(0, 8);

  Constant12_out1 <= to_unsigned(1, 8);

  
  Switch6_out1 <= Constant11_out1 WHEN switch_compare_1 = '0' ELSE
      Constant12_out1;

  Constant14_out1 <= to_unsigned(2, 8);

  
  Switch7_out1 <= Constant13_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant14_out1;

  Constant16_out1 <= to_unsigned(3, 8);

  
  Switch8_out1 <= Constant15_out1 WHEN switch_compare_1_2 = '0' ELSE
      Constant16_out1;

  Constant18_out1 <= to_unsigned(4, 8);

  
  Switch9_out1 <= Constant17_out1 WHEN switch_compare_1_3 = '0' ELSE
      Constant18_out1;

  Add3_add_temp <= Switch6_out1 + Switch7_out1;
  Add3_add_temp_1 <= Add3_add_temp + Switch8_out1;
  Add3_out1 <= Add3_add_temp_1 + Switch9_out1;

  
  Switch3_out1 <= Constant5_out1_dtc WHEN switch_compare_1_4 = '0' ELSE
      Address_unsigned;

  Data_Type_Conversion1_out1 <= Switch3_out1(7 DOWNTO 0);

  Ethernet_header_out1(0) <= Preamble_out1(0);
  Ethernet_header_out1(1) <= Preamble_out1(1);
  Ethernet_header_out1(2) <= Preamble_out1(2);
  Ethernet_header_out1(3) <= Preamble_out1(3);
  Ethernet_header_out1(4) <= Preamble_out1(4);
  Ethernet_header_out1(5) <= Preamble_out1(5);
  Ethernet_header_out1(6) <= Preamble_out1(6);
  Ethernet_header_out1(7) <= SOF_out1;
  Ethernet_header_out1(8) <= Destination_physical_address_out1(0);
  Ethernet_header_out1(9) <= Destination_physical_address_out1(1);
  Ethernet_header_out1(10) <= Destination_physical_address_out1(2);
  Ethernet_header_out1(11) <= Destination_physical_address_out1(3);
  Ethernet_header_out1(12) <= Destination_physical_address_out1(4);
  Ethernet_header_out1(13) <= Destination_physical_address_out1(5);
  Ethernet_header_out1(14) <= Source_physical_address_out1(0);
  Ethernet_header_out1(15) <= Source_physical_address_out1(1);
  Ethernet_header_out1(16) <= Source_physical_address_out1(2);
  Ethernet_header_out1(17) <= Source_physical_address_out1(3);
  Ethernet_header_out1(18) <= Source_physical_address_out1(4);
  Ethernet_header_out1(19) <= Source_physical_address_out1(5);

  
  Ethernet_selector_out1 <= Ethernet_header_out1(0) WHEN Data_Type_Conversion1_out1 = 0 ELSE
      Ethernet_header_out1(1) WHEN Data_Type_Conversion1_out1 = 1 ELSE
      Ethernet_header_out1(2) WHEN Data_Type_Conversion1_out1 = 2 ELSE
      Ethernet_header_out1(3) WHEN Data_Type_Conversion1_out1 = 3 ELSE
      Ethernet_header_out1(4) WHEN Data_Type_Conversion1_out1 = 4 ELSE
      Ethernet_header_out1(5) WHEN Data_Type_Conversion1_out1 = 5 ELSE
      Ethernet_header_out1(6) WHEN Data_Type_Conversion1_out1 = 6 ELSE
      Ethernet_header_out1(7) WHEN Data_Type_Conversion1_out1 = 7 ELSE
      Ethernet_header_out1(8) WHEN Data_Type_Conversion1_out1 = 8 ELSE
      Ethernet_header_out1(9) WHEN Data_Type_Conversion1_out1 = 9 ELSE
      Ethernet_header_out1(10) WHEN Data_Type_Conversion1_out1 = 10 ELSE
      Ethernet_header_out1(11) WHEN Data_Type_Conversion1_out1 = 11 ELSE
      Ethernet_header_out1(12) WHEN Data_Type_Conversion1_out1 = 12 ELSE
      Ethernet_header_out1(13) WHEN Data_Type_Conversion1_out1 = 13 ELSE
      Ethernet_header_out1(14) WHEN Data_Type_Conversion1_out1 = 14 ELSE
      Ethernet_header_out1(15) WHEN Data_Type_Conversion1_out1 = 15 ELSE
      Ethernet_header_out1(16) WHEN Data_Type_Conversion1_out1 = 16 ELSE
      Ethernet_header_out1(17) WHEN Data_Type_Conversion1_out1 = 17 ELSE
      Ethernet_header_out1(18) WHEN Data_Type_Conversion1_out1 = 18 ELSE
      Ethernet_header_out1(19);

  Add1_sub_cast <= signed(resize(Address_unsigned, 32));
  Add1_sub_cast_1 <= signed(resize(Constant7_out1, 32));
  Add1_sub_temp <= Add1_sub_cast - Add1_sub_cast_1;
  Add1_out1 <= unsigned(Add1_sub_temp(15 DOWNTO 0));

  
  Switch4_out1 <= Constant6_out1_dtc WHEN switch_compare_1_5 = '0' ELSE
      Add1_out1;

  Data_Type_Conversion2_out1 <= Switch4_out1(7 DOWNTO 0);

  IP_header_out1(0) <= IP_Protocol_out1(0);
  IP_header_out1(1) <= IP_Protocol_out1(1);
  IP_header_out1(2) <= IPHeader1_out1(0);
  IP_header_out1(3) <= IPHeader1_out1(1);
  IP_header_out1(4) <= Data_Type_Conversion5_out1(0);
  IP_header_out1(5) <= Data_Type_Conversion5_out1(1);
  IP_header_out1(6) <= IPHeader2_out1(0);
  IP_header_out1(7) <= IPHeader2_out1(1);
  IP_header_out1(8) <= IPHeader2_out1(2);
  IP_header_out1(9) <= IPHeader2_out1(3);
  IP_header_out1(10) <= IPHeader2_out1(4);
  IP_header_out1(11) <= IPHeader2_out1(5);
  IP_header_out1(12) <= IPChecksum_out1(0);
  IP_header_out1(13) <= IPChecksum_out1(1);
  IP_header_out1(14) <= IPSource_out1(0);
  IP_header_out1(15) <= IPSource_out1(1);
  IP_header_out1(16) <= IPSource_out1(2);
  IP_header_out1(17) <= IPSource_out1(3);
  IP_header_out1(18) <= IPDestination_out1(0);
  IP_header_out1(19) <= IPDestination_out1(1);
  IP_header_out1(20) <= IPDestination_out1(2);
  IP_header_out1(21) <= IPDestination_out1(3);

  
  IP_header_selector_out1 <= IP_header_out1(0) WHEN Data_Type_Conversion2_out1 = 0 ELSE
      IP_header_out1(1) WHEN Data_Type_Conversion2_out1 = 1 ELSE
      IP_header_out1(2) WHEN Data_Type_Conversion2_out1 = 2 ELSE
      IP_header_out1(3) WHEN Data_Type_Conversion2_out1 = 3 ELSE
      IP_header_out1(4) WHEN Data_Type_Conversion2_out1 = 4 ELSE
      IP_header_out1(5) WHEN Data_Type_Conversion2_out1 = 5 ELSE
      IP_header_out1(6) WHEN Data_Type_Conversion2_out1 = 6 ELSE
      IP_header_out1(7) WHEN Data_Type_Conversion2_out1 = 7 ELSE
      IP_header_out1(8) WHEN Data_Type_Conversion2_out1 = 8 ELSE
      IP_header_out1(9) WHEN Data_Type_Conversion2_out1 = 9 ELSE
      IP_header_out1(10) WHEN Data_Type_Conversion2_out1 = 10 ELSE
      IP_header_out1(11) WHEN Data_Type_Conversion2_out1 = 11 ELSE
      IP_header_out1(12) WHEN Data_Type_Conversion2_out1 = 12 ELSE
      IP_header_out1(13) WHEN Data_Type_Conversion2_out1 = 13 ELSE
      IP_header_out1(14) WHEN Data_Type_Conversion2_out1 = 14 ELSE
      IP_header_out1(15) WHEN Data_Type_Conversion2_out1 = 15 ELSE
      IP_header_out1(16) WHEN Data_Type_Conversion2_out1 = 16 ELSE
      IP_header_out1(17) WHEN Data_Type_Conversion2_out1 = 17 ELSE
      IP_header_out1(18) WHEN Data_Type_Conversion2_out1 = 18 ELSE
      IP_header_out1(19) WHEN Data_Type_Conversion2_out1 = 19 ELSE
      IP_header_out1(20) WHEN Data_Type_Conversion2_out1 = 20 ELSE
      IP_header_out1(21);

  Add2_sub_cast <= signed(resize(Address_unsigned, 32));
  Add2_sub_cast_1 <= signed(resize(Constant9_out1, 32));
  Add2_sub_temp <= Add2_sub_cast - Add2_sub_cast_1;
  Add2_out1 <= unsigned(Add2_sub_temp(15 DOWNTO 0));

  
  Switch5_out1 <= Constant8_out1_dtc WHEN switch_compare_1_6 = '0' ELSE
      Add2_out1;

  Data_Type_Conversion3_out1 <= Switch5_out1(7 DOWNTO 0);

  UDP_header_out1(0) <= UDP_port_src_out1(0);
  UDP_header_out1(1) <= UDP_port_src_out1(1);
  UDP_header_out1(2) <= UDP_port_dest_out1(0);
  UDP_header_out1(3) <= UDP_port_dest_out1(1);
  UDP_header_out1(4) <= Data_Type_Conversion_out1(0);
  UDP_header_out1(5) <= Data_Type_Conversion_out1(1);
  UDP_header_out1(6) <= UDP_checksum_out1(0);
  UDP_header_out1(7) <= UDP_checksum_out1(1);

  
  UDP_header_selector_out1 <= UDP_header_out1(0) WHEN Data_Type_Conversion3_out1 = 0 ELSE
      UDP_header_out1(1) WHEN Data_Type_Conversion3_out1 = 1 ELSE
      UDP_header_out1(2) WHEN Data_Type_Conversion3_out1 = 2 ELSE
      UDP_header_out1(3) WHEN Data_Type_Conversion3_out1 = 3 ELSE
      UDP_header_out1(4) WHEN Data_Type_Conversion3_out1 = 4 ELSE
      UDP_header_out1(5) WHEN Data_Type_Conversion3_out1 = 5 ELSE
      UDP_header_out1(6) WHEN Data_Type_Conversion3_out1 = 6 ELSE
      UDP_header_out1(7);

  Data_out1_unsigned <= unsigned(Data_out1);

  Constant3_out1 <= to_unsigned(0, 8);

  
  Multiport_Switch1_out1 <= Ethernet_selector_out1 WHEN Add3_out1 = 1 ELSE
      IP_header_selector_out1 WHEN Add3_out1 = 2 ELSE
      UDP_header_selector_out1 WHEN Add3_out1 = 3 ELSE
      Data_out1_unsigned WHEN Add3_out1 = 4 ELSE
      Constant3_out1;

  Data <= std_logic_vector(Multiport_Switch1_out1);

  
  switch_compare_1_7 <= '1' WHEN Compare_To_Constant4_out1 > '0' ELSE
      '0';

  Constant19_out1 <= to_unsigned(0, 14);

  Constant20_out1 <= to_unsigned(50, 8);

  Add4_out1 <= resize(Address_unsigned, 14) - resize(Constant20_out1, 14);

  
  Switch10_out1 <= Constant19_out1 WHEN switch_compare_1_7 = '0' ELSE
      Add4_out1;

  Address2 <= std_logic_vector(Switch10_out1);

  Select_mem_unsigned <= unsigned(Select_mem);


END rtl;

