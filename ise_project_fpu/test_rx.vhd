-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_Test\ise_project_1\test_rx.vhd
-- Created: 2012-11-02 14:15:17
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: test_rx
-- Source Path: test_rx
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.test_rx_pkg.ALL;

ENTITY test_rx IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        RX_CLK                            :   IN    std_logic;
        RX_DV                             :   IN    std_logic;
        RX_D                              :   IN    std_logic_vector(0 TO 3);  -- boolean [4]
        RX_ER                             :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        BRAM_addr                         :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        BRAM_clk                          :   OUT   std_logic;
        BRAM_data                         :   OUT   std_logic_vector(0 TO 7);  -- boolean [8]
        BRAM_en                           :   OUT   std_logic;
        read_ev                           :   OUT   std_logic
        );
END test_rx;


ARCHITECTURE rtl OF test_rx IS

  -- Component Declarations
  COMPONENT alpha4bit2uint8
    PORT( u                               :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          y                               :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Receive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          next_rdy                        :   IN    std_logic;
          RX_DV                           :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          RX_ER                           :   IN    std_logic;
          RX_CLK                          :   IN    std_logic;
          Data                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          ind1                            :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
          put_next                        :   OUT   std_logic;
          ram_en                          :   OUT   std_logic;
          read_ev                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT int2bit
    PORT( In1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1                            :   OUT   std_logic_vector(0 TO 7)  -- boolean [8]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : alpha4bit2uint8
    USE ENTITY work.alpha4bit2uint8(rtl);

  FOR ALL : Receive
    USE ENTITY work.Receive(rtl);

  FOR ALL : int2bit
    USE ENTITY work.int2bit(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Integer_Delay5_out1              : std_logic;
  SIGNAL Integer_Delay6_out1              : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL Data_Type_Conversion_out1        : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Data_Type_Conversion_out1_1      : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL alpha4bit2uint8_out1             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Integer_Delay7_out1              : std_logic;
  SIGNAL Integer_Delay4_out1              : std_logic;
  SIGNAL Receive_out3                     : std_logic;
  SIGNAL Integer_Delay3_out1              : std_logic;
  SIGNAL Receive_out1                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Receive_out2                     : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL Receive_out4                     : std_logic;
  SIGNAL Receive_out5                     : std_logic;
  SIGNAL int2bit_out1                     : std_logic_vector(0 TO 7);  -- boolean [8]

BEGIN
  u_4bit2uint8 : alpha4bit2uint8
    PORT MAP( u => Data_Type_Conversion_out1_1,  -- uint8 [4]
              y => alpha4bit2uint8_out1  -- uint8
              );

  u_Receive : Receive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              next_rdy => Integer_Delay3_out1,
              RX_DV => Integer_Delay5_out1,
              data_in => alpha4bit2uint8_out1,  -- uint8
              RX_ER => Integer_Delay7_out1,
              RX_CLK => Integer_Delay4_out1,
              Data => Receive_out1,  -- uint8
              ind1 => Receive_out2,  -- ufix11
              put_next => Receive_out3,
              ram_en => Receive_out4,
              read_ev => Receive_out5
              );

  u_int2bit : int2bit
    PORT MAP( In1 => Receive_out1,  -- uint8
              Out1 => int2bit_out1  -- boolean [8]
              );

  enb <= clk_enable;

  Integer_Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay5_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay5_out1 <= RX_DV;
      END IF;
    END IF;
  END PROCESS Integer_Delay5_process;


  Integer_Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay6_out1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay6_out1 <= RX_D;
      END IF;
    END IF;
  END PROCESS Integer_Delay6_process;



  Data_Type_Conversion_out1_gen: FOR ii IN 0 TO 3 GENERATE
    Data_Type_Conversion_out1(ii) <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & Integer_Delay6_out1(ii);
  END GENERATE Data_Type_Conversion_out1_gen;


  outputgen: FOR k IN 0 TO 3 GENERATE
    Data_Type_Conversion_out1_1(k) <= std_logic_vector(Data_Type_Conversion_out1(k));
  END GENERATE;

  Integer_Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay7_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay7_out1 <= RX_ER;
      END IF;
    END IF;
  END PROCESS Integer_Delay7_process;


  Integer_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay4_out1 <= RX_CLK;
      END IF;
    END IF;
  END PROCESS Integer_Delay4_process;


  Integer_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay3_out1 <= Receive_out3;
      END IF;
    END IF;
  END PROCESS Integer_Delay3_process;


  BRAM_addr <= Receive_out2;

  BRAM_clk <= Receive_out3;

  BRAM_data <= int2bit_out1;

  BRAM_en <= Receive_out4;

  read_ev <= Receive_out5;

  ce_out <= clk_enable;

END rtl;

