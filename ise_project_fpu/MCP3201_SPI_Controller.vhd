-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\MCP3201_SPI_Controller.vhd
-- Created: 2013-04-29 10:18:45
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: MCP3201_SPI_Controller
-- Source Path: analog_ext/MCP3201 SPI Controller
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.analog_ext_pkg.ALL;

ENTITY MCP3201_SPI_Controller IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        sample_tick                       :   IN    std_logic;
        CLK_IN                            :   IN    std_logic;
        DOUT                              :   IN    std_logic;
        CSL                               :   OUT   std_logic;
        CLK_OUT                           :   OUT   std_logic;
        Ready                             :   OUT   std_logic;
        sig1                              :   OUT   std_logic_vector(0 TO 11)  -- boolean [12]
        );
END MCP3201_SPI_Controller;


ARCHITECTURE rtl OF MCP3201_SPI_Controller IS

  -- Signals
  SIGNAL is_MCP3201_SPI_Controller        : T_state_type_is_MCP3201_SPI_Controller;  -- uint8
  SIGNAL sig                              : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL ind                              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL is_MCP3201_SPI_Controller_next   : T_state_type_is_MCP3201_SPI_Controller;  -- enumerated type (13 enums)
  SIGNAL sig_next                         : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL ind_next                         : unsigned(3 DOWNTO 0);  -- ufix4

BEGIN
  MCP3201_SPI_Controller_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sig <= (OTHERS => '0');
      ind <= to_unsigned(0, 4);
      is_MCP3201_SPI_Controller <= IN_Wait_Request;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        is_MCP3201_SPI_Controller <= is_MCP3201_SPI_Controller_next;
        sig <= sig_next;
        ind <= ind_next;
      END IF;
    END IF;
  END PROCESS MCP3201_SPI_Controller_1_process;

  MCP3201_SPI_Controller_1_output : PROCESS (is_MCP3201_SPI_Controller, sample_tick, CLK_IN, DOUT, sig, ind)
  BEGIN
    is_MCP3201_SPI_Controller_next <= is_MCP3201_SPI_Controller;
    ind_next <= ind;
    CSL <= '0';
    CLK_OUT <= '0';
    Ready <= '0';
    sig_next <= sig;
    sig1 <= (OTHERS => '0');

    CASE is_MCP3201_SPI_Controller IS
      WHEN IN_Get_Sample =>
        IF CLK_IN = '1' THEN 
          is_MCP3201_SPI_Controller_next <= IN_Get_Sample1;
        ELSE 
          CSL <= '0';
          CLK_OUT <= '0';
        END IF;
      WHEN IN_Get_Sample1 =>
        IF CLK_IN = '0' THEN 
          is_MCP3201_SPI_Controller_next <= IN_Get_Sample2;
        ELSE 
          CLK_OUT <= '1';
        END IF;
      WHEN IN_Get_Sample2 =>
        IF CLK_IN = '1' THEN 
          is_MCP3201_SPI_Controller_next <= IN_Get_Sample3;
        ELSE 
          CLK_OUT <= '0';
        END IF;
      WHEN IN_Get_Sample3 =>
        IF CLK_IN = '0' THEN 
          is_MCP3201_SPI_Controller_next <= IN_Get_Sample4;
        ELSE 
          CLK_OUT <= '1';
        END IF;
      WHEN IN_Get_Sample4 =>
        IF CLK_IN = '1' THEN 
          is_MCP3201_SPI_Controller_next <= IN_Get_Sample5;
        ELSE 
          CLK_OUT <= '0';
        END IF;
      WHEN IN_Get_Sample5 =>
        IF CLK_IN = '0' THEN 
          ind_next <= to_unsigned(0, 4);
          is_MCP3201_SPI_Controller_next <= IN_Receive_Data;
        ELSE 
          CLK_OUT <= '1';
        END IF;
      WHEN IN_Receive_Data =>
        IF CLK_IN = '1' THEN 
          sig_next(to_integer(ind)) <= DOUT;
          IF ind = 11 THEN 
            is_MCP3201_SPI_Controller_next <= IN_Receive_Data2;
          ELSE 
            is_MCP3201_SPI_Controller_next <= IN_Receive_Data1;
          END IF;
        ELSE 
          CLK_OUT <= '0';
        END IF;
      WHEN IN_Receive_Data1 =>
        IF CLK_IN = '0' THEN 
          ind_next <= ind + 1;
          is_MCP3201_SPI_Controller_next <= IN_Receive_Data;
        ELSE 
          CLK_OUT <= '1';
        END IF;
      WHEN IN_Receive_Data2 =>
        IF CLK_IN = '0' THEN 
          is_MCP3201_SPI_Controller_next <= IN_Receive_Data3;
        ELSE 
          CLK_OUT <= '1';
        END IF;
      WHEN IN_Receive_Data3 =>
        IF CLK_IN = '1' THEN 
          is_MCP3201_SPI_Controller_next <= IN_Receive_Data4;
        ELSE 
          CLK_OUT <= '0';
          CSL <= '1';
          sig1 <= sig;
        END IF;
      WHEN IN_Receive_Data4 =>
        IF CLK_IN = '0' THEN 
          is_MCP3201_SPI_Controller_next <= IN_Wait_Request;
        ELSE 
          Ready <= '0';
          CSL <= '1';
          CLK_OUT <= '0';
          sig1 <= sig;
        END IF;
      WHEN IN_Wait_CLK_0 =>
        IF CLK_IN = '0' THEN 
          is_MCP3201_SPI_Controller_next <= IN_Get_Sample;
        ELSE 
          Ready <= '1';
          sig_next <= (OTHERS => '0');
        END IF;
      WHEN IN_Wait_Request =>
        IF sample_tick = '1' THEN 
          is_MCP3201_SPI_Controller_next <= IN_Wait_CLK_0;
        ELSE 
          CSL <= '1';
          CLK_OUT <= '0';
          Ready <= '0';
          sig1 <= sig;
        END IF;
      WHEN OTHERS => 
        is_MCP3201_SPI_Controller_next <= IN_Wait_Request;
    END CASE;

  END PROCESS MCP3201_SPI_Controller_1_output;


END rtl;

