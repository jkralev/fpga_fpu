-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\analog_mod.vhd
-- Created: 2013-02-23 10:31:21
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: analog_mod
-- Source Path: analog_mod
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY analog_mod IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Activate                          :   IN    std_logic;
        spi_miso_in                       :   IN    std_logic;
        DAC1                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        adata1i                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
        adata2i                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
        ce_out                            :   OUT   std_logic;
        dac_cs_out                        :   OUT   std_logic;
        spi_clock_out                     :   OUT   std_logic;
        spi_mosi_out                      :   OUT   std_logic;
        dac_clr                           :   OUT   std_logic;
        preamp_cs_out                     :   OUT   std_logic;
        ad_conv_out                       :   OUT   std_logic;
        preamp_shdn_out                   :   OUT   std_logic;
        adc1                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        adc2                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        led0                              :   OUT   std_logic;
        adata1                            :   OUT   std_logic_vector(0 TO 13);  -- boolean [14]
        adata2                            :   OUT   std_logic_vector(0 TO 13)  -- boolean [14]
        );
END analog_mod;


ARCHITECTURE rtl OF analog_mod IS

  -- Component Declarations
  COMPONENT DAC_Init
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          amp_scale                       :   IN    std_logic_vector(0 TO 7);  -- boolean [8]
          led_on                          :   OUT   std_logic;
          DAC_CS                          :   OUT   std_logic;
          SPI_clock                       :   OUT   std_logic;
          DAC_CLR                         :   OUT   std_logic;
          AMP_CS                          :   OUT   std_logic;
          AD_CONV                         :   OUT   std_logic;
          AMP_SHDN                        :   OUT   std_logic;
          SPI_mosi                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Subsystem
    PORT( In1                             :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
          Out1                            :   OUT   std_logic_vector(0 TO 31)  -- boolean [32]
          );
  END COMPONENT;

  COMPONENT Handle_Timer_Event
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          DAC_Param                       :   IN    std_logic_vector(0 TO 31);  -- boolean [32]
          Sub_en                          :   IN    std_logic;
          spi_in                          :   IN    std_logic;
          DAC_CS                          :   OUT   std_logic;
          SPI_clock                       :   OUT   std_logic;
          SPI_mosi                        :   OUT   std_logic;
          adc_data1                       :   OUT   std_logic_vector(0 TO 13);  -- boolean [14]
          adc_data2                       :   OUT   std_logic_vector(0 TO 13);  -- boolean [14]
          AD_CONV                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Convert_Integer_to_Single
    PORT( u                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
          y                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DAC_Init
    USE ENTITY work.DAC_Init(rtl);

  FOR ALL : Subsystem
    USE ENTITY work.Subsystem(rtl);

  FOR ALL : Handle_Timer_Event
    USE ENTITY work.Handle_Timer_Event(rtl);

  FOR ALL : Convert_Integer_to_Single
    USE ENTITY work.Convert_Integer_to_Single(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Scale_out1                       : std_logic_vector(0 TO 7);  -- boolean [8]
  SIGNAL DAC_Init_out1                    : std_logic;
  SIGNAL DAC_Init_out2                    : std_logic;
  SIGNAL DAC_Init_out3                    : std_logic;
  SIGNAL DAC_Init_out4                    : std_logic;
  SIGNAL DAC_Init_out5                    : std_logic;
  SIGNAL DAC_Init_out6                    : std_logic;
  SIGNAL DAC_Init_out7                    : std_logic;
  SIGNAL DAC_Init_out8                    : std_logic;
  SIGNAL DAC_Init_out1_1                  : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL Subsystem_out1                   : std_logic_vector(0 TO 31);  -- boolean [32]
  SIGNAL Integer_Delay5_out1              : std_logic;
  SIGNAL Integer_Delay5_out1_1            : std_logic;
  SIGNAL Handle_Timer_Event_out1          : std_logic;
  SIGNAL Handle_Timer_Event_out2          : std_logic;
  SIGNAL Handle_Timer_Event_out3          : std_logic;
  SIGNAL Handle_Timer_Event_out4          : std_logic_vector(0 TO 13);  -- boolean [14]
  SIGNAL Handle_Timer_Event_out5          : std_logic_vector(0 TO 13);  -- boolean [14]
  SIGNAL Handle_Timer_Event_out6          : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL DAC_Init_out3_1                  : std_logic;
  SIGNAL DAC_Init_out8_1                  : std_logic;
  SIGNAL DAC_Init_out6_1                  : std_logic;
  SIGNAL Convert_Integer_to_Single_out1   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Convert_Integer_to_Single1_out1  : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Input voltage range: 0.4 - 2.9, GAIN=-1
  -- 
  -- D[13:0]=GAINx(Vin-1.65V)/1.25Vx8192
  -- 
  -- Vin=1.65-1.25*D/8192

  u_DAC_Init : DAC_Init
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              amp_scale => Scale_out1,  -- boolean [8]
              led_on => DAC_Init_out1,
              DAC_CS => DAC_Init_out2,
              SPI_clock => DAC_Init_out3,
              DAC_CLR => DAC_Init_out4,
              AMP_CS => DAC_Init_out5,
              AD_CONV => DAC_Init_out6,
              AMP_SHDN => DAC_Init_out7,
              SPI_mosi => DAC_Init_out8
              );

  u_Subsystem : Subsystem
    PORT MAP( In1 => DAC1,  -- sfix12
              Out1 => Subsystem_out1  -- boolean [32]
              );

  u_Handle_Timer_Event : Handle_Timer_Event
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              DAC_Param => Subsystem_out1,  -- boolean [32]
              Sub_en => Integer_Delay5_out1_1,
              spi_in => spi_miso_in,
              DAC_CS => Handle_Timer_Event_out1,
              SPI_clock => Handle_Timer_Event_out2,
              SPI_mosi => Handle_Timer_Event_out3,
              adc_data1 => Handle_Timer_Event_out4,  -- boolean [14]
              adc_data2 => Handle_Timer_Event_out5,  -- boolean [14]
              AD_CONV => Handle_Timer_Event_out6
              );

  u_Convert_Integer_to_Single : Convert_Integer_to_Single
    PORT MAP( u => adata1i,  -- sfix14
              y => Convert_Integer_to_Single_out1  -- uint32
              );

  u_Convert_Integer_to_Single1 : Convert_Integer_to_Single
    PORT MAP( u => adata2i,  -- sfix14
              y => Convert_Integer_to_Single1_out1  -- uint32
              );

  Scale_out1(0) <= '0';
  Scale_out1(1) <= '0';
  Scale_out1(2) <= '0';
  Scale_out1(3) <= '1';
  Scale_out1(4) <= '0';
  Scale_out1(5) <= '0';
  Scale_out1(6) <= '0';
  Scale_out1(7) <= '1';

  DAC_Init_out1_1 <=  NOT DAC_Init_out1;

  Logical_Operator5_out1 <= DAC_Init_out1_1 AND DAC_Init_out2;

  enb <= clk_enable;

  Integer_Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay5_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay5_out1 <= Activate;
      END IF;
    END IF;
  END PROCESS Integer_Delay5_process;


  Integer_Delay5_out1_1 <= Integer_Delay5_out1 AND DAC_Init_out1;

  Logical_Operator4_out1 <= Logical_Operator5_out1 OR Handle_Timer_Event_out1;

  dac_cs_out <= Logical_Operator4_out1;

  DAC_Init_out3_1 <= DAC_Init_out3 OR Handle_Timer_Event_out2;

  spi_clock_out <= DAC_Init_out3_1;

  DAC_Init_out8_1 <= DAC_Init_out8 OR Handle_Timer_Event_out3;

  spi_mosi_out <= DAC_Init_out8_1;

  dac_clr <= DAC_Init_out4;

  preamp_cs_out <= DAC_Init_out5;

  DAC_Init_out6_1 <= DAC_Init_out6 OR Handle_Timer_Event_out6;

  ad_conv_out <= DAC_Init_out6_1;

  preamp_shdn_out <= DAC_Init_out7;

  adc1 <= Convert_Integer_to_Single_out1;

  adc2 <= Convert_Integer_to_Single1_out1;

  led0 <= DAC_Init_out1;

  adata1 <= Handle_Timer_Event_out4;

  adata2 <= Handle_Timer_Event_out5;

  ce_out <= clk_enable;

END rtl;

