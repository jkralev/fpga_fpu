-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\fp_mul.vhd
-- Created: 2013-02-13 11:09:02
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fp_mul
-- Source Path: fp_mul
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY fp_mul IS
  PORT( A_frac_1                          :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        B_frac_1                          :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        A_sign                            :   IN    std_logic;
        A_exp                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        B_exp                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        B_sign                            :   IN    std_logic;
        C_sign                            :   OUT   std_logic;
        C_exp                             :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        C_frac                            :   OUT   std_logic_vector(22 DOWNTO 0)  -- ufix23
        );
END fp_mul;


ARCHITECTURE rtl OF fp_mul IS

  -- Component Declarations
  COMPONENT Normalize_mul
    PORT( u                               :   IN    std_logic_vector(47 DOWNTO 0);  -- ufix48
          y                               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          de                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Normalize_mul
    USE ENTITY work.Normalize_mul(rtl);

  -- Signals
  SIGNAL A_sign_1                         : std_logic;
  SIGNAL A_exp_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL B_exp_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add2_add_temp                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL sign4_out1                       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Add4_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add4_sub_cast_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add4_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add4_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL A_frac_1_unsigned                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain_cast                        : unsigned(47 DOWNTO 0);  -- ufix48_En46
  SIGNAL Gain_out1                        : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL B_frac_1_unsigned                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain1_cast                       : unsigned(47 DOWNTO 0);  -- ufix48_En46
  SIGNAL Gain1_out1                       : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Product_out1                     : unsigned(47 DOWNTO 0);  -- ufix48_En46
  SIGNAL Gain2_cast                       : unsigned(95 DOWNTO 0);  -- ufix96_En47
  SIGNAL Gain2_out1                       : unsigned(47 DOWNTO 0);  -- ufix48
  SIGNAL Normalize_mul_out1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Normalize_mul_out2               : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Normalize_mul_out2_signed        : signed(7 DOWNTO 0);  -- int8
  SIGNAL Add3_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add3_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add3_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Normalize_mul_out1_unsigned      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion4_out1       : unsigned(22 DOWNTO 0);  -- ufix23

BEGIN
  u_Normalize_mul : Normalize_mul
    PORT MAP( u => std_logic_vector(Gain2_out1),  -- ufix48
              y => Normalize_mul_out1,  -- uint32
              de => Normalize_mul_out2  -- int8
              );

  A_sign_1 <= A_sign XOR B_sign;

  C_sign <= A_sign_1;

  A_exp_unsigned <= unsigned(A_exp);

  B_exp_unsigned <= unsigned(B_exp);

  Add2_add_temp <= resize(A_exp_unsigned, 32) + resize(B_exp_unsigned, 32);
  
  Add2_out1 <= "111111111" WHEN Add2_add_temp(31 DOWNTO 9) /= "00000000000000000000000" ELSE
      Add2_add_temp(8 DOWNTO 0);

  sign4_out1 <= to_unsigned(127, 9);

  Add4_sub_cast <= signed(resize(Add2_out1, 32));
  Add4_sub_cast_1 <= signed(resize(sign4_out1, 32));
  Add4_sub_temp <= Add4_sub_cast - Add4_sub_cast_1;
  
  Add4_out1 <= "11111111" WHEN (Add4_sub_temp(31) = '0') AND (Add4_sub_temp(30 DOWNTO 8) /= "00000000000000000000000") ELSE
      "00000000" WHEN Add4_sub_temp(31) = '1' ELSE
      unsigned(Add4_sub_temp(7 DOWNTO 0));

  A_frac_1_unsigned <= unsigned(A_frac_1);

  Gain_cast <= resize(A_frac_1_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 48);
  Gain_out1 <= Gain_cast(46 DOWNTO 23) + ("0" & Gain_cast(22));

  B_frac_1_unsigned <= unsigned(B_frac_1);

  Gain1_cast <= resize(B_frac_1_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 48);
  Gain1_out1 <= Gain1_cast(46 DOWNTO 23) + ("0" & Gain1_cast(22));

  Product_out1 <= Gain_out1 * Gain1_out1;

  Gain2_cast <= resize(Product_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 96);
  
  Gain2_out1 <= X"FFFFFFFFFFFF" WHEN (Gain2_cast(95) /= '0') OR ((Gain2_cast(95) = '0') AND (Gain2_cast(94 DOWNTO 47) = X"FFFFFFFFFFFF")) ELSE
      Gain2_cast(94 DOWNTO 47) + ("0" & Gain2_cast(46));

  Normalize_mul_out2_signed <= signed(Normalize_mul_out2);

  Add3_sub_cast <= signed(resize(Add4_out1, 32));
  Add3_sub_temp <= Add3_sub_cast - resize(Normalize_mul_out2_signed, 32);
  
  Add3_out1 <= "11111111" WHEN (Add3_sub_temp(31) = '0') AND (Add3_sub_temp(30 DOWNTO 8) /= "00000000000000000000000") ELSE
      "00000000" WHEN Add3_sub_temp(31) = '1' ELSE
      unsigned(Add3_sub_temp(7 DOWNTO 0));

  C_exp <= std_logic_vector(Add3_out1);

  Normalize_mul_out1_unsigned <= unsigned(Normalize_mul_out1);

  Data_Type_Conversion4_out1 <= Normalize_mul_out1_unsigned(22 DOWNTO 0);

  C_frac <= std_logic_vector(Data_Type_Conversion4_out1);

END rtl;

