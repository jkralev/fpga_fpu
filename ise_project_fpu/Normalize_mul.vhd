-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\Normalize_mul.vhd
-- Created: 2013-02-13 11:09:02
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Normalize_mul
-- Source Path: fp_mul/Normalize_mul
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.fp_mul_pkg.ALL;

ENTITY Normalize_mul IS
  PORT( u                                 :   IN    std_logic_vector(47 DOWNTO 0);  -- ufix48
        y                                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        de                                :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
        );
END Normalize_mul;


ARCHITECTURE rtl OF Normalize_mul IS

  -- Signals
  SIGNAL u_unsigned                       : unsigned(47 DOWNTO 0);  -- ufix48
  SIGNAL y_tmp                            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL de_tmp                           : signed(7 DOWNTO 0);  -- int8

BEGIN
  u_unsigned <= unsigned(u);

  Normalize_mul_1_output : PROCESS (u_unsigned)
    VARIABLE buf : unsigned(47 DOWNTO 0);
    VARIABLE p : signed(7 DOWNTO 0);
    VARIABLE c : unsigned(47 DOWNTO 0);
    VARIABLE c_uint : unsigned(47 DOWNTO 0);
    VARIABLE y1 : unsigned(47 DOWNTO 0);
    VARIABLE k : unsigned(7 DOWNTO 0);
    VARIABLE y_0 : unsigned(47 DOWNTO 0);
    VARIABLE droppedBits : unsigned(47 DOWNTO 0);
    VARIABLE c_uint_0 : unsigned(47 DOWNTO 0);
    VARIABLE y_1 : unsigned(47 DOWNTO 0);
    VARIABLE y_2 : unsigned(47 DOWNTO 0);
    VARIABLE droppedbits_0 : unsigned(47 DOWNTO 0);
    VARIABLE c_uint_1 : unsigned(47 DOWNTO 0);
    VARIABLE k_0 : unsigned(7 DOWNTO 0);
    VARIABLE add_temp : vector_of_signed9(0 TO 24);
    VARIABLE p_0 : signed(32 DOWNTO 0);
    VARIABLE cast : signed(31 DOWNTO 0);
    VARIABLE sub_cast : signed(31 DOWNTO 0);
    VARIABLE sub_temp : signed(31 DOWNTO 0);
    VARIABLE cast_0 : signed(7 DOWNTO 0);
  BEGIN
    buf := u_unsigned;
    p := to_signed(-1, 8);
    c_uint := u_unsigned AND unsigned'(X"800000000000");
    c := c_uint;

    FOR ind IN 0 TO 24 LOOP
      IF c = to_unsigned(0, 48) THEN 
        add_temp(ind) := resize(p, 9) + 1;
        IF (add_temp(ind)(8) = '0') AND (add_temp(ind)(7) /= '0') THEN 
          p := "01111111";
        ELSIF (add_temp(ind)(8) = '1') AND (add_temp(ind)(7) /= '1') THEN 
          p := "10000000";
        ELSE 
          p := add_temp(ind)(7 DOWNTO 0);
        END IF;
        droppedbits_0 := buf srl 47;
        IF droppedbits_0 = to_unsigned(0, 48) THEN 
          y_2 := buf sll 1;
        ELSE 
          y_2 :=  NOT to_unsigned(0, 48);
        END IF;
        buf := y_2;
        c_uint_1 := y_2 AND unsigned'(X"800000000000");
        c := c_uint_1;
      END IF;
    END LOOP;

    IF p > 0 THEN 
      k_0 := unsigned(p);
      IF k_0 >= 48 THEN 
        droppedBits := u_unsigned;
        k_0 := to_unsigned(0, 8);
      ELSE 
        sub_cast := signed(resize(k_0, 32));
        sub_temp := 48 - sub_cast;
        cast_0 := sub_temp(7 DOWNTO 0);
        droppedBits := u_unsigned srl to_integer(cast_0);
      END IF;
      IF droppedBits = to_unsigned(0, 48) THEN 
        y_0 := u_unsigned sll to_integer(k_0);
      ELSE 
        y_0 :=  NOT to_unsigned(0, 48);
      END IF;
      y1 := y_0;
    ELSE 
      IF p <= (-128) THEN 
        k := to_unsigned(128, 8);
      ELSE 
        p_0 :=  - (resize(p, 33));
        cast := p_0(31 DOWNTO 0);
        k := unsigned(cast(7 DOWNTO 0));
      END IF;
      IF k >= 48 THEN 
        y1 := to_unsigned(0, 48);
      ELSE 
        y1 := u_unsigned srl to_integer(k);
      END IF;
    END IF;
    c_uint_0 := y1 AND unsigned'(X"3FFFFFFFFFFF");
    y_1 := c_uint_0 srl 23;
    IF y_1(47 DOWNTO 32) /= "0000000000000000" THEN 
      y_tmp <= "11111111111111111111111111111111";
    ELSE 
      y_tmp <= y_1(31 DOWNTO 0);
    END IF;
    de_tmp <= p;
  END PROCESS Normalize_mul_1_output;


  y <= std_logic_vector(y_tmp);

  de <= std_logic_vector(de_tmp);

END rtl;

