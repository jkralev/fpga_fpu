-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_Test\ise_project_1\Timer10ms.vhd
-- Created: 2012-11-03 11:52:20
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Timer10ms
-- Source Path: Timer10ms
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Timer10ms IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        ModelTick                         :   OUT   std_logic
        );
END Timer10ms;


ARCHITECTURE rtl OF Timer10ms IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Counter_Limited1_count           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Counter_Limited1_out1            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL alpha10_ms_impulses              : std_logic;

BEGIN
  enb <= clk_enable;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 500000
  Counter_Limited1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_Limited1_count <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Counter_Limited1_count = 500000 THEN 
          Counter_Limited1_count <= to_unsigned(0, 32);
        ELSE 
          Counter_Limited1_count <= Counter_Limited1_count + 1;
        END IF;
      END IF;
    END IF;
  END PROCESS Counter_Limited1_process;

  Counter_Limited1_out1 <= Counter_Limited1_count;

  
  alpha10_ms_impulses <= '1' WHEN Counter_Limited1_out1 = 500000 ELSE
      '0';

  ModelTick <= alpha10_ms_impulses;

  ce_out <= clk_enable;

END rtl;

