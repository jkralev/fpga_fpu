-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_Test\ise_project_1\UnPack.vhd
-- Created: 2012-11-16 23:00:40
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: UnPack
-- Source Path: contr1/UnPack
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.contr1_pkg.ALL;

ENTITY UnPack IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In1                               :   IN    vector_of_std_logic_vector8(0 TO 1);  -- uint8 [2]
        In2                               :   IN    vector_of_std_logic_vector8(0 TO 1);  -- uint8 [2]
        In3                               :   IN    vector_of_std_logic_vector8(0 TO 1);  -- uint8 [2]
        In4                               :   IN    vector_of_std_logic_vector8(0 TO 1);  -- uint8 [2]
        In5                               :   IN    vector_of_std_logic_vector8(0 TO 1);  -- uint8 [2]
        In6                               :   IN    vector_of_std_logic_vector8(0 TO 1);  -- uint8 [2]
        Out1                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        Out2                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        Out3                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        Out4                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        Out5                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        Out6                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En16
        );
END UnPack;


ARCHITECTURE rtl OF UnPack IS

  -- Signals
  SIGNAL In1_unsigned                     : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL Data_Type_Conversion4_out1       : vector_of_unsigned16(0 TO 1);  -- uint16 [2]
  SIGNAL Data_Type_Conversion4_out1_0     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion4_out1_1     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Shift_Arithmetic1_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bitwise_Operator1_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Decode_cast                      : unsigned(31 DOWNTO 0);  -- ufix32_En30
  SIGNAL Decode_out1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Data_Type_Conversion11_out1      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Integer_Delay4_out1              : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL In2_unsigned                     : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL Data_Type_Conversion5_out1       : vector_of_unsigned16(0 TO 1);  -- uint16 [2]
  SIGNAL Data_Type_Conversion5_out1_0     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion5_out1_1     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Shift_Arithmetic2_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bitwise_Operator2_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Decode1_cast                     : unsigned(31 DOWNTO 0);  -- ufix32_En30
  SIGNAL Decode1_out1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Data_Type_Conversion1_out1       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Integer_Delay1_out1              : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL In3_unsigned                     : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL Data_Type_Conversion8_out1       : vector_of_unsigned16(0 TO 1);  -- uint16 [2]
  SIGNAL Data_Type_Conversion8_out1_0     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion8_out1_1     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Shift_Arithmetic3_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bitwise_Operator3_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Decode2_cast                     : unsigned(31 DOWNTO 0);  -- ufix32_En30
  SIGNAL Decode2_out1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Data_Type_Conversion6_out1       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Integer_Delay2_out1              : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL In4_unsigned                     : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL Data_Type_Conversion12_out1      : vector_of_unsigned16(0 TO 1);  -- uint16 [2]
  SIGNAL Data_Type_Conversion12_out1_0    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion12_out1_1    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Shift_Arithmetic4_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bitwise_Operator4_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Decode3_cast                     : unsigned(31 DOWNTO 0);  -- ufix32_En27
  SIGNAL Decode3_out1                     : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Data_Type_Conversion9_out1       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Integer_Delay3_out1              : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL In5_unsigned                     : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL Data_Type_Conversion14_out1      : vector_of_unsigned16(0 TO 1);  -- uint16 [2]
  SIGNAL Data_Type_Conversion14_out1_0    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion14_out1_1    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Shift_Arithmetic5_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bitwise_Operator5_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Decode4_cast                     : unsigned(31 DOWNTO 0);  -- ufix32_En27
  SIGNAL Decode4_out1                     : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Data_Type_Conversion15_out1      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Integer_Delay5_out1              : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL In6_unsigned                     : vector_of_unsigned8(0 TO 1);  -- uint8 [2]
  SIGNAL Data_Type_Conversion17_out1      : vector_of_unsigned16(0 TO 1);  -- uint16 [2]
  SIGNAL Data_Type_Conversion17_out1_0    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion17_out1_1    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Shift_Arithmetic6_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bitwise_Operator6_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Decode5_cast                     : unsigned(31 DOWNTO 0);  -- ufix32_En27
  SIGNAL Decode5_out1                     : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Data_Type_Conversion18_out1      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Integer_Delay6_out1              : signed(31 DOWNTO 0);  -- sfix32_En16

BEGIN
  outputgen5: FOR k IN 0 TO 1 GENERATE
    In1_unsigned(k) <= unsigned(In1(k));
  END GENERATE;


  Data_Type_Conversion4_out1_gen: FOR ii IN 0 TO 1 GENERATE
    Data_Type_Conversion4_out1(ii) <= resize(In1_unsigned(ii), 16);
  END GENERATE Data_Type_Conversion4_out1_gen;


  Data_Type_Conversion4_out1_0 <= Data_Type_Conversion4_out1(0);

  Data_Type_Conversion4_out1_1 <= Data_Type_Conversion4_out1(1);

  Shift_Arithmetic1_out1 <= Data_Type_Conversion4_out1_1 sll 8;

  Bitwise_Operator1_out1 <= Data_Type_Conversion4_out1_0 OR Shift_Arithmetic1_out1;

  Decode_cast <= resize(Bitwise_Operator1_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Decode_out1 <= signed(Decode_cast(30 DOWNTO 15));

  Data_Type_Conversion11_out1 <= resize(Decode_out1 & '0', 32);

  Integer_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay4_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay4_out1 <= Data_Type_Conversion11_out1;
      END IF;
    END IF;
  END PROCESS Integer_Delay4_process;


  Out1 <= std_logic_vector(Integer_Delay4_out1);

  outputgen4: FOR k IN 0 TO 1 GENERATE
    In2_unsigned(k) <= unsigned(In2(k));
  END GENERATE;


  Data_Type_Conversion5_out1_gen: FOR ii1 IN 0 TO 1 GENERATE
    Data_Type_Conversion5_out1(ii1) <= resize(In2_unsigned(ii1), 16);
  END GENERATE Data_Type_Conversion5_out1_gen;


  Data_Type_Conversion5_out1_0 <= Data_Type_Conversion5_out1(0);

  Data_Type_Conversion5_out1_1 <= Data_Type_Conversion5_out1(1);

  Shift_Arithmetic2_out1 <= Data_Type_Conversion5_out1_1 sll 8;

  Bitwise_Operator2_out1 <= Data_Type_Conversion5_out1_0 OR Shift_Arithmetic2_out1;

  Decode1_cast <= resize(Bitwise_Operator2_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Decode1_out1 <= signed(Decode1_cast(30 DOWNTO 15));

  Data_Type_Conversion1_out1 <= resize(Decode1_out1 & '0', 32);

  Integer_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay1_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay1_out1 <= Data_Type_Conversion1_out1;
      END IF;
    END IF;
  END PROCESS Integer_Delay1_process;


  Out2 <= std_logic_vector(Integer_Delay1_out1);

  outputgen3: FOR k IN 0 TO 1 GENERATE
    In3_unsigned(k) <= unsigned(In3(k));
  END GENERATE;


  Data_Type_Conversion8_out1_gen: FOR ii2 IN 0 TO 1 GENERATE
    Data_Type_Conversion8_out1(ii2) <= resize(In3_unsigned(ii2), 16);
  END GENERATE Data_Type_Conversion8_out1_gen;


  Data_Type_Conversion8_out1_0 <= Data_Type_Conversion8_out1(0);

  Data_Type_Conversion8_out1_1 <= Data_Type_Conversion8_out1(1);

  Shift_Arithmetic3_out1 <= Data_Type_Conversion8_out1_1 sll 8;

  Bitwise_Operator3_out1 <= Data_Type_Conversion8_out1_0 OR Shift_Arithmetic3_out1;

  Decode2_cast <= resize(Bitwise_Operator3_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Decode2_out1 <= signed(Decode2_cast(30 DOWNTO 15));

  Data_Type_Conversion6_out1 <= resize(Decode2_out1 & '0', 32);

  Integer_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay2_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay2_out1 <= Data_Type_Conversion6_out1;
      END IF;
    END IF;
  END PROCESS Integer_Delay2_process;


  Out3 <= std_logic_vector(Integer_Delay2_out1);

  outputgen2: FOR k IN 0 TO 1 GENERATE
    In4_unsigned(k) <= unsigned(In4(k));
  END GENERATE;


  Data_Type_Conversion12_out1_gen: FOR ii3 IN 0 TO 1 GENERATE
    Data_Type_Conversion12_out1(ii3) <= resize(In4_unsigned(ii3), 16);
  END GENERATE Data_Type_Conversion12_out1_gen;


  Data_Type_Conversion12_out1_0 <= Data_Type_Conversion12_out1(0);

  Data_Type_Conversion12_out1_1 <= Data_Type_Conversion12_out1(1);

  Shift_Arithmetic4_out1 <= Data_Type_Conversion12_out1_1 sll 8;

  Bitwise_Operator4_out1 <= Data_Type_Conversion12_out1_0 OR Shift_Arithmetic4_out1;

  Decode3_cast <= resize(Bitwise_Operator4_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Decode3_out1 <= signed(Decode3_cast(30 DOWNTO 15));

  Data_Type_Conversion9_out1 <= resize(Decode3_out1 & '0' & '0' & '0' & '0', 32);

  Integer_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay3_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay3_out1 <= Data_Type_Conversion9_out1;
      END IF;
    END IF;
  END PROCESS Integer_Delay3_process;


  Out4 <= std_logic_vector(Integer_Delay3_out1);

  outputgen1: FOR k IN 0 TO 1 GENERATE
    In5_unsigned(k) <= unsigned(In5(k));
  END GENERATE;


  Data_Type_Conversion14_out1_gen: FOR ii4 IN 0 TO 1 GENERATE
    Data_Type_Conversion14_out1(ii4) <= resize(In5_unsigned(ii4), 16);
  END GENERATE Data_Type_Conversion14_out1_gen;


  Data_Type_Conversion14_out1_0 <= Data_Type_Conversion14_out1(0);

  Data_Type_Conversion14_out1_1 <= Data_Type_Conversion14_out1(1);

  Shift_Arithmetic5_out1 <= Data_Type_Conversion14_out1_1 sll 8;

  Bitwise_Operator5_out1 <= Data_Type_Conversion14_out1_0 OR Shift_Arithmetic5_out1;

  Decode4_cast <= resize(Bitwise_Operator5_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Decode4_out1 <= signed(Decode4_cast(30 DOWNTO 15));

  Data_Type_Conversion15_out1 <= resize(Decode4_out1 & '0' & '0' & '0' & '0', 32);

  Integer_Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay5_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay5_out1 <= Data_Type_Conversion15_out1;
      END IF;
    END IF;
  END PROCESS Integer_Delay5_process;


  Out5 <= std_logic_vector(Integer_Delay5_out1);

  outputgen: FOR k IN 0 TO 1 GENERATE
    In6_unsigned(k) <= unsigned(In6(k));
  END GENERATE;


  Data_Type_Conversion17_out1_gen: FOR ii5 IN 0 TO 1 GENERATE
    Data_Type_Conversion17_out1(ii5) <= resize(In6_unsigned(ii5), 16);
  END GENERATE Data_Type_Conversion17_out1_gen;


  Data_Type_Conversion17_out1_0 <= Data_Type_Conversion17_out1(0);

  Data_Type_Conversion17_out1_1 <= Data_Type_Conversion17_out1(1);

  Shift_Arithmetic6_out1 <= Data_Type_Conversion17_out1_1 sll 8;

  Bitwise_Operator6_out1 <= Data_Type_Conversion17_out1_0 OR Shift_Arithmetic6_out1;

  Decode5_cast <= resize(Bitwise_Operator6_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Decode5_out1 <= signed(Decode5_cast(30 DOWNTO 15));

  Data_Type_Conversion18_out1 <= resize(Decode5_out1 & '0' & '0' & '0' & '0', 32);

  Integer_Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay6_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay6_out1 <= Data_Type_Conversion18_out1;
      END IF;
    END IF;
  END PROCESS Integer_Delay6_process;


  Out6 <= std_logic_vector(Integer_Delay6_out1);

END rtl;

