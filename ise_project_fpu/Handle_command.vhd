-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\Handle_command.vhd
-- Created: 2012-12-12 09:55:26
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Handle_command
-- Source Path: contr1/Handle_command
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.contr1_pkg.ALL;

ENTITY Handle_command IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        read_ev                           :   IN    std_logic;
        BRAM_out                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        PC_In_1                           :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        PC_In_2                           :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        PC_In_3                           :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        PC_In_4                           :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        BRAM_en                           :   OUT   std_logic;
        BRAM_addr                         :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        led                               :   OUT   std_logic;
        trig_pack                         :   OUT   std_logic;
        select_mem                        :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        crespond                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        psize                             :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        AOffset                           :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
        Param                             :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        write_ram                         :   OUT   std_logic;
        data_ram                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        addr_ram                          :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
        PC_Out_1                          :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        PC_Out_2                          :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        PC_Out_3                          :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        PC_Out_4                          :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        PC_Out_5                          :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        PC_Out_6                          :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        start                             :   OUT   std_logic
        );
END Handle_command;


ARCHITECTURE rtl OF Handle_command IS

  -- Signals
  SIGNAL BRAM_out_unsigned                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL PC_In_1_unsigned                 : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_In_2_unsigned                 : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_In_3_unsigned                 : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_In_4_unsigned                 : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL is_Handle_command                : T_state_type_is_Handle_command;  -- uint8
  SIGNAL BRAM_addr_tmp                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL select_mem_tmp                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL crespond_tmp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL psize_tmp                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL ind                              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL packet                           : vector_of_unsigned8(0 TO 16);  -- uint8 [17]
  SIGNAL AOffset_tmp                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Param_tmp                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL LastCmd                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL packet_out                       : vector_of_unsigned8(0 TO 15);  -- uint8 [16]
  SIGNAL data_ram_tmp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL addr_ram_tmp                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL PC_Out_1_tmp                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_2_tmp                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_3_tmp                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_4_tmp                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_5_tmp                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_6_tmp                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL BRAM_en_reg                      : std_logic;
  SIGNAL BRAM_addr_reg                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL led_reg                          : std_logic;
  SIGNAL trig_pack_reg                    : std_logic;
  SIGNAL select_mem_reg                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL crespond_reg                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL psize_reg                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL AOffset_reg                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Param_reg                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL write_ram_reg                    : std_logic;
  SIGNAL data_ram_reg                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL addr_ram_reg                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL PC_Out_1_reg                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_2_reg                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_3_reg                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_4_reg                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_5_reg                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_6_reg                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL start_reg                        : std_logic;
  SIGNAL is_Handle_command_next           : T_state_type_is_Handle_command;  -- enumerated type (7 enums)
  SIGNAL ind_next                         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL packet_next                      : vector_of_unsigned8(0 TO 16);  -- uint8 [17]
  SIGNAL LastCmd_next                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL packet_out_next                  : vector_of_unsigned8(0 TO 15);  -- uint8 [16]
  SIGNAL BRAM_en_reg_next                 : std_logic;
  SIGNAL BRAM_addr_reg_next               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL led_reg_next                     : std_logic;
  SIGNAL trig_pack_reg_next               : std_logic;
  SIGNAL select_mem_reg_next              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL crespond_reg_next                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL psize_reg_next                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL AOffset_reg_next                 : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Param_reg_next                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL write_ram_reg_next               : std_logic;
  SIGNAL data_ram_reg_next                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL addr_ram_reg_next                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL PC_Out_1_reg_next                : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_2_reg_next                : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_3_reg_next                : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_4_reg_next                : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_5_reg_next                : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL PC_Out_6_reg_next                : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL start_reg_next                   : std_logic;

BEGIN
  BRAM_out_unsigned <= unsigned(BRAM_out);

  outputgen9: FOR k IN 0 TO 3 GENERATE
    PC_In_1_unsigned(k) <= unsigned(PC_In_1(k));
  END GENERATE;

  outputgen8: FOR k IN 0 TO 3 GENERATE
    PC_In_2_unsigned(k) <= unsigned(PC_In_2(k));
  END GENERATE;

  outputgen7: FOR k IN 0 TO 3 GENERATE
    PC_In_3_unsigned(k) <= unsigned(PC_In_3(k));
  END GENERATE;

  outputgen6: FOR k IN 0 TO 3 GENERATE
    PC_In_4_unsigned(k) <= unsigned(PC_In_4(k));
  END GENERATE;

  Handle_command_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ind <= to_unsigned(0, 5);

      FOR t_0 IN 0 TO 16 LOOP
        packet(t_0) <= to_unsigned(0, 8);
      END LOOP;

      LastCmd <= to_unsigned(0, 8);

      FOR t_1 IN 0 TO 15 LOOP
        packet_out(t_1) <= to_unsigned(0, 8);
      END LOOP;

      BRAM_en_reg <= '0';
      BRAM_addr_reg <= to_unsigned(0, 11);
      led_reg <= '0';
      trig_pack_reg <= '0';
      select_mem_reg <= to_unsigned(0, 4);
      crespond_reg <= to_unsigned(0, 8);
      psize_reg <= to_unsigned(0, 11);
      AOffset_reg <= to_unsigned(0, 14);
      Param_reg <= to_unsigned(0, 8);
      write_ram_reg <= '0';
      data_ram_reg <= to_unsigned(0, 8);
      addr_ram_reg <= to_unsigned(0, 14);

      FOR t_2 IN 0 TO 3 LOOP
        PC_Out_1_reg(t_2) <= to_unsigned(0, 8);
        PC_Out_2_reg(t_2) <= to_unsigned(0, 8);
        PC_Out_3_reg(t_2) <= to_unsigned(0, 8);
        PC_Out_4_reg(t_2) <= to_unsigned(0, 8);
        PC_Out_5_reg(t_2) <= to_unsigned(0, 8);
        PC_Out_6_reg(t_2) <= to_unsigned(0, 8);
      END LOOP;

      start_reg <= '0';
      is_Handle_command <= IN_Receive;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        is_Handle_command <= is_Handle_command_next;
        ind <= ind_next;
        packet <= packet_next;
        LastCmd <= LastCmd_next;
        packet_out <= packet_out_next;
        BRAM_en_reg <= BRAM_en_reg_next;
        BRAM_addr_reg <= BRAM_addr_reg_next;
        led_reg <= led_reg_next;
        trig_pack_reg <= trig_pack_reg_next;
        select_mem_reg <= select_mem_reg_next;
        crespond_reg <= crespond_reg_next;
        psize_reg <= psize_reg_next;
        AOffset_reg <= AOffset_reg_next;
        Param_reg <= Param_reg_next;
        write_ram_reg <= write_ram_reg_next;
        data_ram_reg <= data_ram_reg_next;
        addr_ram_reg <= addr_ram_reg_next;
        PC_Out_1_reg <= PC_Out_1_reg_next;
        PC_Out_2_reg <= PC_Out_2_reg_next;
        PC_Out_3_reg <= PC_Out_3_reg_next;
        PC_Out_4_reg <= PC_Out_4_reg_next;
        PC_Out_5_reg <= PC_Out_5_reg_next;
        PC_Out_6_reg <= PC_Out_6_reg_next;
        start_reg <= start_reg_next;
      END IF;
    END IF;
  END PROCESS Handle_command_1_process;

  Handle_command_1_output : PROCESS (is_Handle_command, read_ev, BRAM_out_unsigned, ind, packet, LastCmd, packet_out, PC_In_1_unsigned, 
      PC_In_3_unsigned, PC_In_4_unsigned, BRAM_en_reg, BRAM_addr_reg, led_reg, trig_pack_reg, 
      select_mem_reg, crespond_reg, psize_reg, AOffset_reg, Param_reg, write_ram_reg, data_ram_reg, 
      addr_ram_reg, PC_Out_1_reg, PC_Out_2_reg, PC_Out_3_reg, PC_Out_4_reg, PC_Out_5_reg, 
      PC_Out_6_reg, start_reg)
    VARIABLE guard1 : std_logic;
    VARIABLE guard2 : std_logic;
    VARIABLE ind_temp : unsigned(4 DOWNTO 0);
    VARIABLE packet_temp : vector_of_unsigned8(0 TO 16);
    VARIABLE LastCmd_temp : unsigned(7 DOWNTO 0);
    VARIABLE packet_out_temp : vector_of_unsigned8(0 TO 15);
    VARIABLE addr_ram_reg_temp : unsigned(13 DOWNTO 0);
  BEGIN
    ind_temp := ind;
    packet_temp := packet;
    LastCmd_temp := LastCmd;
    packet_out_temp := packet_out;
    addr_ram_reg_temp := addr_ram_reg;
    is_Handle_command_next <= is_Handle_command;
    BRAM_en_reg_next <= BRAM_en_reg;
    BRAM_addr_reg_next <= BRAM_addr_reg;
    led_reg_next <= led_reg;
    trig_pack_reg_next <= trig_pack_reg;
    select_mem_reg_next <= select_mem_reg;
    crespond_reg_next <= crespond_reg;
    psize_reg_next <= psize_reg;
    AOffset_reg_next <= AOffset_reg;
    Param_reg_next <= Param_reg;
    write_ram_reg_next <= write_ram_reg;
    data_ram_reg_next <= data_ram_reg;
    PC_Out_1_reg_next <= PC_Out_1_reg;
    PC_Out_2_reg_next <= PC_Out_2_reg;
    PC_Out_3_reg_next <= PC_Out_3_reg;
    PC_Out_4_reg_next <= PC_Out_4_reg;
    PC_Out_5_reg_next <= PC_Out_5_reg;
    PC_Out_6_reg_next <= PC_Out_6_reg;
    start_reg_next <= start_reg;
    guard1 := '0';
    guard2 := '0';

    CASE is_Handle_command IS
      WHEN IN_Receive =>
        IF read_ev = '1' THEN 
          BRAM_addr_reg_next <= to_unsigned(14, 11);
          led_reg_next <= '0';
          is_Handle_command_next <= IN_Wait3;
        END IF;
      WHEN IN_Wait =>
        is_Handle_command_next <= IN_Wait4;
      WHEN IN_Wait2 =>
        trig_pack_reg_next <= '0';
        BRAM_addr_reg_next <= to_unsigned(0, 11);
        is_Handle_command_next <= IN_Receive;
      WHEN IN_Wait3 =>
        ind_temp := to_unsigned(0, 5);
        AOffset_reg_next <= to_unsigned(0, 14);
        start_reg_next <= '0';
        is_Handle_command_next <= IN_Wait4;
      WHEN IN_Wait4 =>
        packet_temp(to_integer(ind)) := BRAM_out_unsigned;
        IF ind = 16 THEN 
          IF packet_temp(0) = 6 THEN 
            led_reg_next <= '1';
            select_mem_reg_next <= to_unsigned(4, 4);
            psize_reg_next <= to_unsigned(168, 11);
            trig_pack_reg_next <= '1';
            --ARP Request
            guard1 := '1';
          ELSIF packet_temp(1) > 10 THEN 
            IF packet_temp(1) = 22 THEN 
              led_reg_next <= '1';
              select_mem_reg_next <= to_unsigned(1, 4);
              psize_reg_next <= to_unsigned(168, 11);
              trig_pack_reg_next <= '1';
              guard1 := '1';
            ELSIF packet_temp(1) = 23 THEN 
              led_reg_next <= '1';
              select_mem_reg_next <= to_unsigned(3, 4);
              crespond_reg_next <= to_unsigned(100, 8);
              --OK
              psize_reg_next <= to_unsigned(168, 11);
              trig_pack_reg_next <= '1';
              guard1 := '1';
            ELSIF packet_temp(1) = 25 THEN 
              guard1 := '1';
            ELSIF packet_temp(1) = 27 THEN 
              led_reg_next <= '1';
              Param_reg_next <= packet_temp(2);
              guard1 := '1';
            ELSE 
              guard2 := '1';
            END IF;
          ELSIF packet_temp(2) = LastCmd THEN 
            LastCmd_temp := LastCmd + 1;
            packet_out_temp(1) := LastCmd_temp;
            packet_out_temp(4) := PC_In_1_unsigned(0);
            packet_out_temp(5) := PC_In_1_unsigned(1);
            packet_out_temp(6) := PC_In_1_unsigned(2);
            packet_out_temp(7) := PC_In_1_unsigned(3);
            packet_out_temp(8) := PC_In_3_unsigned(0);
            packet_out_temp(9) := PC_In_3_unsigned(1);
            packet_out_temp(10) := PC_In_4_unsigned(0);
            packet_out_temp(11) := PC_In_4_unsigned(1);
            PC_Out_1_reg_next(0) <= packet_temp(5);
            PC_Out_1_reg_next(1) <= packet_temp(6);
            PC_Out_2_reg_next(0) <= packet_temp(7);
            PC_Out_2_reg_next(1) <= packet_temp(8);
            PC_Out_3_reg_next(0) <= packet_temp(9);
            PC_Out_3_reg_next(1) <= packet_temp(10);
            PC_Out_4_reg_next(0) <= packet_temp(11);
            PC_Out_4_reg_next(1) <= packet_temp(12);
            PC_Out_5_reg_next(0) <= packet_temp(13);
            PC_Out_5_reg_next(1) <= packet_temp(14);
            PC_Out_6_reg_next(0) <= packet_temp(15);
            PC_Out_6_reg_next(1) <= packet_temp(16);
            IF packet_temp(3) = 141 THEN 
              start_reg_next <= '1';
            END IF;
            addr_ram_reg_temp := to_unsigned(0, 14);
            write_ram_reg_next <= '1';
            data_ram_reg_next <= packet_out_temp(0);
            is_Handle_command_next <= IN_Wait8;
          ELSE 
            guard2 := '1';
          END IF;
        ELSE 
          ind_temp := ind + 1;
          BRAM_addr_reg_next <= resize(42 + resize(ind_temp, 7), 11);
          led_reg_next <= '0';
          is_Handle_command_next <= IN_Wait;
        END IF;
      WHEN IN_Wait8 =>
        IF addr_ram_reg = 15 THEN 
          write_ram_reg_next <= '0';
          select_mem_reg_next <= to_unsigned(2, 4);
          AOffset_reg_next <= to_unsigned(0, 14);
          psize_reg_next <= to_unsigned(168, 11);
          trig_pack_reg_next <= '1';
          is_Handle_command_next <= IN_Wait2;
        ELSE 
          is_Handle_command_next <= IN_Wait9;
        END IF;
      WHEN IN_Wait9 =>
        addr_ram_reg_temp := addr_ram_reg + 1;
        data_ram_reg_next <= packet_out(to_integer(addr_ram_reg_temp));
        is_Handle_command_next <= IN_Wait8;
      WHEN OTHERS => 
        is_Handle_command_next <= IN_Receive;
    END CASE;

    IF guard2 = '1' THEN 
      write_ram_reg_next <= '0';
      select_mem_reg_next <= to_unsigned(2, 4);
      AOffset_reg_next <= to_unsigned(0, 14);
      psize_reg_next <= to_unsigned(168, 11);
      trig_pack_reg_next <= '1';
      is_Handle_command_next <= IN_Wait2;
    END IF;
    IF guard1 = '1' THEN 
      is_Handle_command_next <= IN_Wait2;
    END IF;
    ind_next <= ind_temp;
    packet_next <= packet_temp;
    LastCmd_next <= LastCmd_temp;
    packet_out_next <= packet_out_temp;
    addr_ram_reg_next <= addr_ram_reg_temp;
  END PROCESS Handle_command_1_output;

  BRAM_en <= BRAM_en_reg_next;
  BRAM_addr_tmp <= BRAM_addr_reg_next;
  led <= led_reg_next;
  trig_pack <= trig_pack_reg_next;
  select_mem_tmp <= select_mem_reg_next;
  crespond_tmp <= crespond_reg_next;
  psize_tmp <= psize_reg_next;
  AOffset_tmp <= AOffset_reg_next;
  Param_tmp <= Param_reg_next;
  write_ram <= write_ram_reg_next;
  data_ram_tmp <= data_ram_reg_next;
  addr_ram_tmp <= addr_ram_reg_next;
  PC_Out_1_tmp <= PC_Out_1_reg_next;
  PC_Out_2_tmp <= PC_Out_2_reg_next;
  PC_Out_3_tmp <= PC_Out_3_reg_next;
  PC_Out_4_tmp <= PC_Out_4_reg_next;
  PC_Out_5_tmp <= PC_Out_5_reg_next;
  PC_Out_6_tmp <= PC_Out_6_reg_next;
  start <= start_reg_next;

  BRAM_addr <= std_logic_vector(BRAM_addr_tmp);

  select_mem <= std_logic_vector(select_mem_tmp);

  crespond <= std_logic_vector(crespond_tmp);

  psize <= std_logic_vector(psize_tmp);

  AOffset <= std_logic_vector(AOffset_tmp);

  Param <= std_logic_vector(Param_tmp);

  data_ram <= std_logic_vector(data_ram_tmp);

  addr_ram <= std_logic_vector(addr_ram_tmp);

  outputgen5: FOR k IN 0 TO 3 GENERATE
    PC_Out_1(k) <= std_logic_vector(PC_Out_1_tmp(k));
  END GENERATE;

  outputgen4: FOR k IN 0 TO 3 GENERATE
    PC_Out_2(k) <= std_logic_vector(PC_Out_2_tmp(k));
  END GENERATE;

  outputgen3: FOR k IN 0 TO 3 GENERATE
    PC_Out_3(k) <= std_logic_vector(PC_Out_3_tmp(k));
  END GENERATE;

  outputgen2: FOR k IN 0 TO 3 GENERATE
    PC_Out_4(k) <= std_logic_vector(PC_Out_4_tmp(k));
  END GENERATE;

  outputgen1: FOR k IN 0 TO 3 GENERATE
    PC_Out_5(k) <= std_logic_vector(PC_Out_5_tmp(k));
  END GENERATE;

  outputgen: FOR k IN 0 TO 3 GENERATE
    PC_Out_6(k) <= std_logic_vector(PC_Out_6_tmp(k));
  END GENERATE;

END rtl;

