-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\IN_OUT_Controller.vhd
-- Created: 2013-03-14 17:42:03
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IN_OUT_Controller
-- Source Path: ivedsp/IN_OUT_Controller
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ivedsp_pkg.ALL;

ENTITY IN_OUT_Controller IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        IN_rsvd                           :   IN    std_logic;
        OUT_rsvd                          :   IN    std_logic;
        BRAM_out                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        port_rsvd                         :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        ADC_Input                         :   IN    vector_of_std_logic_vector8(0 TO 7);  -- uint8 [8]
        PC_In                             :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        BRAM_addr                         :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        PC_Out                            :   OUT   vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        Ready                             :   OUT   std_logic;
        write_outram                      :   OUT   std_logic;
        data_outram                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        addr_outram                       :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
        DAC_Output                        :   OUT   vector_of_std_logic_vector8(0 TO 7)  -- uint8 [8]
        );
END IN_OUT_Controller;


ARCHITECTURE rtl OF IN_OUT_Controller IS

  -- Component Declarations
  COMPONENT Rise_detect
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Rise_detect1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT In_Port_Control
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  COMPONENT Register_rsvd
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Data                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Offset                          :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          Enable                          :   IN    std_logic;
          PC_Out                          :   OUT   vector_of_std_logic_vector8(0 TO 3)  -- uint8 [4]
          );
  END COMPONENT;

  COMPONENT Register1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Data                            :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          DAC_N                           :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          Enable                          :   IN    std_logic;
          DAC                             :   OUT   vector_of_std_logic_vector8(0 TO 7)  -- uint8 [8]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Rise_detect
    USE ENTITY work.Rise_detect(rtl);

  FOR ALL : Rise_detect1
    USE ENTITY work.Rise_detect1(rtl);

  FOR ALL : In_Port_Control
    USE ENTITY work.In_Port_Control(rtl);

  FOR ALL : Register_rsvd
    USE ENTITY work.Register_rsvd(rtl);

  FOR ALL : Register1
    USE ENTITY work.Register1(rtl);

  -- Signals
  SIGNAL IN_rsvd_1                        : std_logic;
  SIGNAL FixPt_Constant7_out1             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL FixPt_Constant2_out1             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL FixPt_Constant3_out1             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Step_out1                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Offset_out1                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Add1_add_temp                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Add1_out1                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Check_for_end_out1               : std_logic;
  SIGNAL Rise_detect_out1                 : std_logic;
  SIGNAL BRAM3_out1                       : std_logic;
  SIGNAL BRAM3_out1_1                     : std_logic;
  SIGNAL Rise_detect1_out1                : std_logic;
  SIGNAL Reset_sw_out1                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Relative_address1_out1           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Data_Type_Conversion2_out1       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL port_unsigned                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Relative_address_out1            : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL FixPt_Constant1_out1             : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Add_add_temp                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Add_add_temp_1                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Add_out1                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Compare_To_Constant1_out1_1      : std_logic;
  SIGNAL In_Port_Control_out1             : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL In_Port_Control_out1_unsigned    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Register_out1                    : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL Register_out1_unsigned           : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Selector_out1                    : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Selector1_out1                   : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Multiport_Switch_out1            : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Compare_To_Constant_out1_1       : std_logic;
  SIGNAL Data_Type_Conversion3_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL PC_In_unsigned                   : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Selector2_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add2_out1                        : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Register1_out1                   : vector_of_std_logic_vector8(0 TO 7);  -- ufix8 [8]

BEGIN
  u_Rise_detect : Rise_detect
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In1 => Check_for_end_out1,
              Out1 => Rise_detect_out1
              );

  u_Rise_detect1 : Rise_detect1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In1 => Logical_Operator1_out1,
              Out1 => Rise_detect1_out1
              );

  u_In_Port_Control : In_Port_Control
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In1 => port_rsvd,  -- ufix5
              Enable => IN_rsvd,
              Out1 => In_Port_Control_out1  -- ufix2
              );

  u_Register : Register_rsvd
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data => BRAM_out,  -- uint8
              Offset => std_logic_vector(Relative_address1_out1),  -- ufix3
              Enable => Compare_To_Constant1_out1_1,
              PC_Out => Register_out1  -- uint8 [4]
              );

  u_Register1 : Register1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data => PC_In,  -- uint8 [4]
              DAC_N => port_rsvd,  -- ufix5
              Enable => OUT_rsvd,
              DAC => Register1_out1  -- uint8 [8]
              );

  IN_rsvd_1 <= IN_rsvd OR OUT_rsvd;

  FixPt_Constant7_out1 <= to_unsigned(0, 3);

  FixPt_Constant2_out1 <= to_unsigned(1, 3);

  FixPt_Constant3_out1 <= to_unsigned(0, 3);

  
  Step_out1 <= FixPt_Constant7_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      FixPt_Constant2_out1;

  Add1_add_temp <= resize(Step_out1, 4) + resize(Offset_out1, 4);
  
  Add1_out1 <= "111" WHEN Add1_add_temp(3) /= '0' ELSE
      Add1_add_temp(2 DOWNTO 0);

  
  Check_for_end_out1 <= '1' WHEN Offset_out1 = 7 ELSE
      '0';

  BRAM3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BRAM3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BRAM3_out1 <= Rise_detect_out1;
      END IF;
    END IF;
  END PROCESS BRAM3_process;


  BRAM3_out1_1 <=  NOT BRAM3_out1;

  Logical_Operator1_out1 <= IN_rsvd_1 AND BRAM3_out1_1;

  
  Reset_sw_out1 <= Add1_out1 WHEN Rise_detect1_out1 = '0' ELSE
      FixPt_Constant3_out1;

  Offset_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Offset_out1 <= to_unsigned(0, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Offset_out1 <= Reset_sw_out1;
      END IF;
    END IF;
  END PROCESS Offset_process;


  Relative_address1_out1 <= Offset_out1 srl 1;

  Data_Type_Conversion2_out1 <= resize(Relative_address1_out1, 5);

  port_unsigned <= unsigned(port_rsvd);

  Relative_address_out1 <= port_unsigned sll 2;

  FixPt_Constant1_out1 <= to_unsigned(43, 11);

  Add_add_temp <= resize(Data_Type_Conversion2_out1, 11) + resize(Relative_address_out1, 11);
  Add_add_temp_1 <= resize(Add_add_temp, 12) + resize(FixPt_Constant1_out1, 12);
  
  Add_out1 <= "11111111111" WHEN Add_add_temp_1(11) /= '0' ELSE
      Add_add_temp_1(10 DOWNTO 0);

  BRAM_addr <= std_logic_vector(Add_out1);

  
  Compare_To_Constant1_out1 <= '1' WHEN port_unsigned < 10 ELSE
      '0';

  Compare_To_Constant1_out1_1 <= Compare_To_Constant1_out1 AND IN_rsvd;

  In_Port_Control_out1_unsigned <= unsigned(In_Port_Control_out1);

  outputgen2: FOR k IN 0 TO 3 GENERATE
    Register_out1_unsigned(k) <= unsigned(Register_out1(k));
  END GENERATE;

  Selector_out1(0) <= unsigned(ADC_Input(0));
  Selector_out1(1) <= unsigned(ADC_Input(1));
  Selector_out1(2) <= unsigned(ADC_Input(2));
  Selector_out1(3) <= unsigned(ADC_Input(3));

  Selector1_out1(0) <= unsigned(ADC_Input(4));
  Selector1_out1(1) <= unsigned(ADC_Input(5));
  Selector1_out1(2) <= unsigned(ADC_Input(6));
  Selector1_out1(3) <= unsigned(ADC_Input(7));

  Multiport_Switch_output : PROCESS (In_Port_Control_out1_unsigned, Register_out1_unsigned, Selector_out1, Selector1_out1)
  BEGIN
    IF In_Port_Control_out1_unsigned = 0 THEN 
      Multiport_Switch_out1 <= Register_out1_unsigned;
    ELSIF In_Port_Control_out1_unsigned = 1 THEN 
      Multiport_Switch_out1 <= Selector_out1;
    ELSE 
      Multiport_Switch_out1 <= Selector1_out1;
    END IF;
  END PROCESS Multiport_Switch_output;


  outputgen1: FOR k IN 0 TO 3 GENERATE
    PC_Out(k) <= std_logic_vector(Multiport_Switch_out1(k));
  END GENERATE;

  Ready <= Rise_detect_out1;

  
  Compare_To_Constant_out1 <= '1' WHEN port_unsigned < 10 ELSE
      '0';

  Compare_To_Constant_out1_1 <= Compare_To_Constant_out1 AND OUT_rsvd;

  write_outram <= Compare_To_Constant_out1_1;

  Data_Type_Conversion3_out1 <= resize(Relative_address1_out1, 8);

  outputgen: FOR k IN 0 TO 3 GENERATE
    PC_In_unsigned(k) <= unsigned(PC_In(k));
  END GENERATE;

  
  Selector2_out1 <= PC_In_unsigned(0) WHEN Data_Type_Conversion3_out1 = 0 ELSE
      PC_In_unsigned(1) WHEN Data_Type_Conversion3_out1 = 1 ELSE
      PC_In_unsigned(2) WHEN Data_Type_Conversion3_out1 = 2 ELSE
      PC_In_unsigned(3);

  data_outram <= std_logic_vector(Selector2_out1);

  Add2_out1 <= resize(Relative_address1_out1, 14) + resize(Relative_address_out1, 14);

  addr_outram <= std_logic_vector(Add2_out1);

  DAC_Output <= Register1_out1;

END rtl;

