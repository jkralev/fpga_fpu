-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\Subsystem.vhd
-- Created: 2013-02-23 10:31:21
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem
-- Source Path: analog_mod/Subsystem
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.analog_mod_pkg.ALL;

ENTITY Subsystem IS
  PORT( In1                               :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        Out1                              :   OUT   std_logic_vector(0 TO 31)  -- boolean [32]
        );
END Subsystem;


ARCHITECTURE rtl OF Subsystem IS

  -- Signals
  SIGNAL Preamble_out1                    : std_logic_vector(0 TO 7);  -- boolean [8]
  SIGNAL Command_out1                     : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL Select_DAC_out1                  : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL In1_signed                       : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator11   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator10   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator9    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator8    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator7    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator6    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator5    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator4    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator3    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator2    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator1    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator11_out1          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Shift_Arithmetic10_out1          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator10_out1          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Shift_Arithmetic9_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator9_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Shift_Arithmetic8_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator8_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Shift_Arithmetic7_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator7_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Shift_Arithmetic6_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator6_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Shift_Arithmetic5_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator5_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Shift_Arithmetic4_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator4_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Shift_Arithmetic3_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator3_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Shift_Arithmetic2_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator2_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Shift_Arithmetic1_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator1_out1           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Shift_Arithmetic_out1            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitMask_for_Bitwise_Operator     : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bitwise_Operator_out1            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Mux1_out1                        : vector_of_signed12(0 TO 11);  -- sfix12 [12]
  SIGNAL Data_Type_Conversion_out1        : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL End_out1                         : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL Mux_out1                         : std_logic_vector(0 TO 31);  -- boolean [32]

BEGIN
  Preamble_out1(0) <= '0';
  Preamble_out1(1) <= '0';
  Preamble_out1(2) <= '0';
  Preamble_out1(3) <= '0';
  Preamble_out1(4) <= '0';
  Preamble_out1(5) <= '0';
  Preamble_out1(6) <= '0';
  Preamble_out1(7) <= '0';

  Command_out1(0) <= '0';
  Command_out1(1) <= '0';
  Command_out1(2) <= '1';
  Command_out1(3) <= '1';

  Select_DAC_out1(0) <= '0';
  Select_DAC_out1(1) <= '0';
  Select_DAC_out1(2) <= '0';
  Select_DAC_out1(3) <= '0';

  In1_signed <= signed(In1);

  bitMask_for_Bitwise_Operator11 <= to_signed(-2048, 12);

  bitMask_for_Bitwise_Operator10 <= to_signed(1024, 12);

  bitMask_for_Bitwise_Operator9 <= to_signed(512, 12);

  bitMask_for_Bitwise_Operator8 <= to_signed(256, 12);

  bitMask_for_Bitwise_Operator7 <= to_signed(128, 12);

  bitMask_for_Bitwise_Operator6 <= to_signed(64, 12);

  bitMask_for_Bitwise_Operator5 <= to_signed(32, 12);

  bitMask_for_Bitwise_Operator4 <= to_signed(16, 12);

  bitMask_for_Bitwise_Operator3 <= to_signed(8, 12);

  bitMask_for_Bitwise_Operator2 <= to_signed(4, 12);

  bitMask_for_Bitwise_Operator1 <= to_signed(2, 12);

  Bitwise_Operator11_out1 <= In1_signed AND bitMask_for_Bitwise_Operator11;

  Shift_Arithmetic10_out1 <= SHIFT_RIGHT(Bitwise_Operator11_out1 , 11);

  Bitwise_Operator10_out1 <= In1_signed AND bitMask_for_Bitwise_Operator10;

  Shift_Arithmetic9_out1 <= SHIFT_RIGHT(Bitwise_Operator10_out1 , 10);

  Bitwise_Operator9_out1 <= In1_signed AND bitMask_for_Bitwise_Operator9;

  Shift_Arithmetic8_out1 <= SHIFT_RIGHT(Bitwise_Operator9_out1 , 9);

  Bitwise_Operator8_out1 <= In1_signed AND bitMask_for_Bitwise_Operator8;

  Shift_Arithmetic7_out1 <= SHIFT_RIGHT(Bitwise_Operator8_out1 , 8);

  Bitwise_Operator7_out1 <= In1_signed AND bitMask_for_Bitwise_Operator7;

  Shift_Arithmetic6_out1 <= SHIFT_RIGHT(Bitwise_Operator7_out1 , 7);

  Bitwise_Operator6_out1 <= In1_signed AND bitMask_for_Bitwise_Operator6;

  Shift_Arithmetic5_out1 <= SHIFT_RIGHT(Bitwise_Operator6_out1 , 6);

  Bitwise_Operator5_out1 <= In1_signed AND bitMask_for_Bitwise_Operator5;

  Shift_Arithmetic4_out1 <= SHIFT_RIGHT(Bitwise_Operator5_out1 , 5);

  Bitwise_Operator4_out1 <= In1_signed AND bitMask_for_Bitwise_Operator4;

  Shift_Arithmetic3_out1 <= SHIFT_RIGHT(Bitwise_Operator4_out1 , 4);

  Bitwise_Operator3_out1 <= In1_signed AND bitMask_for_Bitwise_Operator3;

  Shift_Arithmetic2_out1 <= SHIFT_RIGHT(Bitwise_Operator3_out1 , 3);

  Bitwise_Operator2_out1 <= In1_signed AND bitMask_for_Bitwise_Operator2;

  Shift_Arithmetic1_out1 <= SHIFT_RIGHT(Bitwise_Operator2_out1 , 2);

  Bitwise_Operator1_out1 <= In1_signed AND bitMask_for_Bitwise_Operator1;

  Shift_Arithmetic_out1 <= SHIFT_RIGHT(Bitwise_Operator1_out1 , 1);

  bitMask_for_Bitwise_Operator <= to_signed(1, 12);

  Bitwise_Operator_out1 <= In1_signed AND bitMask_for_Bitwise_Operator;

  Mux1_out1(0) <= Shift_Arithmetic10_out1;
  Mux1_out1(1) <= Shift_Arithmetic9_out1;
  Mux1_out1(2) <= Shift_Arithmetic8_out1;
  Mux1_out1(3) <= Shift_Arithmetic7_out1;
  Mux1_out1(4) <= Shift_Arithmetic6_out1;
  Mux1_out1(5) <= Shift_Arithmetic5_out1;
  Mux1_out1(6) <= Shift_Arithmetic4_out1;
  Mux1_out1(7) <= Shift_Arithmetic3_out1;
  Mux1_out1(8) <= Shift_Arithmetic2_out1;
  Mux1_out1(9) <= Shift_Arithmetic1_out1;
  Mux1_out1(10) <= Shift_Arithmetic_out1;
  Mux1_out1(11) <= Bitwise_Operator_out1;

  
  Data_Type_Conversion_out1(0) <= '1' WHEN Mux1_out1(0) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(1) <= '1' WHEN Mux1_out1(1) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(2) <= '1' WHEN Mux1_out1(2) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(3) <= '1' WHEN Mux1_out1(3) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(4) <= '1' WHEN Mux1_out1(4) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(5) <= '1' WHEN Mux1_out1(5) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(6) <= '1' WHEN Mux1_out1(6) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(7) <= '1' WHEN Mux1_out1(7) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(8) <= '1' WHEN Mux1_out1(8) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(9) <= '1' WHEN Mux1_out1(9) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(10) <= '1' WHEN Mux1_out1(10) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(11) <= '1' WHEN Mux1_out1(11) /= 0 ELSE
      '0';

  End_out1(0) <= '0';
  End_out1(1) <= '0';
  End_out1(2) <= '0';
  End_out1(3) <= '0';

  Mux_out1(0) <= Preamble_out1(0);
  Mux_out1(1) <= Preamble_out1(1);
  Mux_out1(2) <= Preamble_out1(2);
  Mux_out1(3) <= Preamble_out1(3);
  Mux_out1(4) <= Preamble_out1(4);
  Mux_out1(5) <= Preamble_out1(5);
  Mux_out1(6) <= Preamble_out1(6);
  Mux_out1(7) <= Preamble_out1(7);
  Mux_out1(8) <= Command_out1(0);
  Mux_out1(9) <= Command_out1(1);
  Mux_out1(10) <= Command_out1(2);
  Mux_out1(11) <= Command_out1(3);
  Mux_out1(12) <= Select_DAC_out1(0);
  Mux_out1(13) <= Select_DAC_out1(1);
  Mux_out1(14) <= Select_DAC_out1(2);
  Mux_out1(15) <= Select_DAC_out1(3);
  Mux_out1(16) <= Data_Type_Conversion_out1(0);
  Mux_out1(17) <= Data_Type_Conversion_out1(1);
  Mux_out1(18) <= Data_Type_Conversion_out1(2);
  Mux_out1(19) <= Data_Type_Conversion_out1(3);
  Mux_out1(20) <= Data_Type_Conversion_out1(4);
  Mux_out1(21) <= Data_Type_Conversion_out1(5);
  Mux_out1(22) <= Data_Type_Conversion_out1(6);
  Mux_out1(23) <= Data_Type_Conversion_out1(7);
  Mux_out1(24) <= Data_Type_Conversion_out1(8);
  Mux_out1(25) <= Data_Type_Conversion_out1(9);
  Mux_out1(26) <= Data_Type_Conversion_out1(10);
  Mux_out1(27) <= Data_Type_Conversion_out1(11);
  Mux_out1(28) <= End_out1(0);
  Mux_out1(29) <= End_out1(1);
  Mux_out1(30) <= End_out1(2);
  Mux_out1(31) <= End_out1(3);

  Out1 <= Mux_out1;

END rtl;

