-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_Test\ise_project_1\Gen_Imp.vhd
-- Created: 2012-11-02 14:17:20
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Gen_Imp
-- Source Path: Generator1/Gen_Imp
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Generator1_pkg.ALL;

ENTITY Gen_Imp IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        tx_en                             :   IN    std_logic;
        trig_send                         :   IN    std_logic;
        start_ev                          :   OUT   std_logic;
        res_tr                            :   OUT   std_logic
        );
END Gen_Imp;


ARCHITECTURE rtl OF Gen_Imp IS

  -- Signals
  SIGNAL is_Gen_Imp                       : T_state_type_is_Gen_Imp;  -- uint8
  SIGNAL acc                              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL start_ev_reg                     : std_logic;
  SIGNAL res_tr_reg                       : std_logic;
  SIGNAL is_Gen_Imp_next                  : T_state_type_is_Gen_Imp;  -- enumerated type (5 enums)
  SIGNAL acc_next                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL start_ev_reg_next                : std_logic;
  SIGNAL res_tr_reg_next                  : std_logic;

BEGIN
  Gen_Imp_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc <= to_unsigned(0, 32);
      start_ev_reg <= '0';
      res_tr_reg <= '0';
      is_Gen_Imp <= IN_Wait;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        is_Gen_Imp <= is_Gen_Imp_next;
        acc <= acc_next;
        start_ev_reg <= start_ev_reg_next;
        res_tr_reg <= res_tr_reg_next;
      END IF;
    END IF;
  END PROCESS Gen_Imp_1_process;

  Gen_Imp_1_output : PROCESS (is_Gen_Imp, tx_en, acc, trig_send, start_ev_reg, res_tr_reg)
  BEGIN
    is_Gen_Imp_next <= is_Gen_Imp;
    acc_next <= acc;
    start_ev_reg_next <= start_ev_reg;
    res_tr_reg_next <= res_tr_reg;

    CASE is_Gen_Imp IS
      WHEN IN_Reset =>
        res_tr_reg_next <= '0';
        acc_next <= to_unsigned(0, 32);
        is_Gen_Imp_next <= IN_Wait;
      WHEN IN_Start =>
        IF tx_en = '1' THEN 
          acc_next <= to_unsigned(0, 32);
          start_ev_reg_next <= '0';
          is_Gen_Imp_next <= IN_Wait1;
        END IF;
      WHEN IN_Wait =>
        IF acc < 1000 THEN 
          acc_next <= acc + 1;
          is_Gen_Imp_next <= IN_Wait;
        ELSE 
          is_Gen_Imp_next <= IN_Wait3;
        END IF;
      WHEN IN_Wait1 =>
        IF acc < 100000000 THEN 
          acc_next <= acc + 1;
          IF tx_en = '0' THEN 
            acc_next <= to_unsigned(0, 32);
            is_Gen_Imp_next <= IN_Wait;
          ELSE 
            is_Gen_Imp_next <= IN_Wait1;
          END IF;
        ELSE 
          res_tr_reg_next <= '1';
          is_Gen_Imp_next <= IN_Reset;
        END IF;
      WHEN IN_Wait3 =>
        IF trig_send = '1' THEN 
          start_ev_reg_next <= '1';
          is_Gen_Imp_next <= IN_Start;
        END IF;
      WHEN OTHERS => 
        is_Gen_Imp_next <= IN_Wait;
    END CASE;

  END PROCESS Gen_Imp_1_output;

  start_ev <= start_ev_reg_next;
  res_tr <= res_tr_reg_next;

END rtl;

