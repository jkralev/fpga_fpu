-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\fp_sum.vhd
-- Created: 2013-02-13 11:09:24
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fp_sum
-- Source Path: fp_sum
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY fp_sum IS
  PORT( A_frac_1                          :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        B_frac_1                          :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        A_sign                            :   IN    std_logic;
        A_exp                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        B_sign                            :   IN    std_logic;
        B_exp                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        C_sign                            :   OUT   std_logic;
        C_exp                             :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        C_frac                            :   OUT   std_logic_vector(22 DOWNTO 0)  -- ufix23
        );
END fp_sum;


ARCHITECTURE rtl OF fp_sum IS

  -- Component Declarations
  COMPONENT Variable_bitshift
    PORT( u                               :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          n                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          y                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT Normalize
    PORT( u                               :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          y                               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          de                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Variable_bitshift
    USE ENTITY work.Variable_bitshift(rtl);

  FOR ALL : Normalize
    USE ENTITY work.Normalize(rtl);

  -- Signals
  SIGNAL A_exp_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL B_exp_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL exp_out1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL A_frac_1_unsigned                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion7_out1       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add_sub_cast                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_sub_cast_1                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_sub_temp                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1                         : signed(7 DOWNTO 0);  -- int8
  SIGNAL Variable_bitshift_out1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Variable_bitshift_out1_unsigned  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion1_out1       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL B_frac_1_unsigned                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion9_out1       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add1_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_sub_cast_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1                        : signed(7 DOWNTO 0);  -- int8
  SIGNAL Variable_bitshift1_out1          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Variable_bitshift1_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion2_out1       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL sign5_out1                       : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL bigger_out1                      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL A_sign_1                         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL smaller_out1                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Add5_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add5_sub_cast_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add5_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add5_out1                        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Add2_add_temp                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1                        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL exp1_out1                        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Data_Type_Conversion3_out1       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Normalize_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Normalize_out2                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Normalize_out2_signed            : signed(7 DOWNTO 0);  -- int8
  SIGNAL Add3_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add3_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add3_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Normalize_out1_unsigned          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion4_out1       : unsigned(22 DOWNTO 0);  -- ufix23

BEGIN
  u_Variable_bitshift : Variable_bitshift
    PORT MAP( u => std_logic_vector(Data_Type_Conversion7_out1),  -- uint32
              n => std_logic_vector(Add_out1),  -- int8
              y => Variable_bitshift_out1  -- uint32
              );

  u_Variable_bitshift1 : Variable_bitshift
    PORT MAP( u => std_logic_vector(Data_Type_Conversion9_out1),  -- uint32
              n => std_logic_vector(Add1_out1),  -- int8
              y => Variable_bitshift1_out1  -- uint32
              );

  u_Normalize : Normalize
    PORT MAP( u => std_logic_vector(Data_Type_Conversion3_out1),  -- uint32
              y => Normalize_out1,  -- uint32
              de => Normalize_out2  -- int8
              );

  A_exp_unsigned <= unsigned(A_exp);

  B_exp_unsigned <= unsigned(B_exp);

  
  Relational_Operator_relop1 <= '1' WHEN A_exp_unsigned < B_exp_unsigned ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN Relational_Operator_relop1 >= '1' ELSE
      '0';

  
  exp_out1 <= A_exp_unsigned WHEN switch_compare_1 = '0' ELSE
      B_exp_unsigned;

  A_frac_1_unsigned <= unsigned(A_frac_1);

  Data_Type_Conversion7_out1 <= resize(A_frac_1_unsigned, 32);

  Add_sub_cast <= signed(resize(exp_out1, 32));
  Add_sub_cast_1 <= signed(resize(A_exp_unsigned, 32));
  Add_sub_temp <= Add_sub_cast - Add_sub_cast_1;
  
  Add_out1 <= "01111111" WHEN (Add_sub_temp(31) = '0') AND (Add_sub_temp(30 DOWNTO 7) /= "000000000000000000000000") ELSE
      "10000000" WHEN (Add_sub_temp(31) = '1') AND (Add_sub_temp(30 DOWNTO 7) /= "111111111111111111111111") ELSE
      Add_sub_temp(7 DOWNTO 0);

  Variable_bitshift_out1_unsigned <= unsigned(Variable_bitshift_out1);

  Data_Type_Conversion1_out1 <= Variable_bitshift_out1_unsigned(23 DOWNTO 0);

  B_frac_1_unsigned <= unsigned(B_frac_1);

  Data_Type_Conversion9_out1 <= resize(B_frac_1_unsigned, 32);

  Add1_sub_cast <= signed(resize(exp_out1, 32));
  Add1_sub_cast_1 <= signed(resize(B_exp_unsigned, 32));
  Add1_sub_temp <= Add1_sub_cast - Add1_sub_cast_1;
  
  Add1_out1 <= "01111111" WHEN (Add1_sub_temp(31) = '0') AND (Add1_sub_temp(30 DOWNTO 7) /= "000000000000000000000000") ELSE
      "10000000" WHEN (Add1_sub_temp(31) = '1') AND (Add1_sub_temp(30 DOWNTO 7) /= "111111111111111111111111") ELSE
      Add1_sub_temp(7 DOWNTO 0);

  Variable_bitshift1_out1_unsigned <= unsigned(Variable_bitshift1_out1);

  Data_Type_Conversion2_out1 <= Variable_bitshift1_out1_unsigned(23 DOWNTO 0);

  
  Relational_Operator1_relop1 <= '1' WHEN Data_Type_Conversion1_out1 < Data_Type_Conversion2_out1 ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Relational_Operator1_relop1 >= '1' ELSE
      '0';

  
  sign5_out1 <= A_sign WHEN switch_compare_1_1 = '0' ELSE
      B_sign;

  C_sign <= sign5_out1;

  
  switch_compare_1_2 <= '1' WHEN Relational_Operator1_relop1 >= '1' ELSE
      '0';

  
  bigger_out1 <= Data_Type_Conversion1_out1 WHEN switch_compare_1_2 = '0' ELSE
      Data_Type_Conversion2_out1;

  
  switch_compare_1_3 <= '1' WHEN Relational_Operator1_relop1 >= '1' ELSE
      '0';

  A_sign_1 <= A_sign XOR B_sign;

  Logical_Operator_out1 <=  NOT A_sign_1;

  
  switch_compare_1_4 <= '1' WHEN Logical_Operator_out1 >= '1' ELSE
      '0';

  
  smaller_out1 <= Data_Type_Conversion2_out1 WHEN switch_compare_1_3 = '0' ELSE
      Data_Type_Conversion1_out1;

  Add5_sub_cast <= signed(resize(bigger_out1, 32));
  Add5_sub_cast_1 <= signed(resize(smaller_out1, 32));
  Add5_sub_temp <= Add5_sub_cast - Add5_sub_cast_1;
  
  Add5_out1 <= "1111111111111111111111111" WHEN (Add5_sub_temp(31) = '0') AND (Add5_sub_temp(30 DOWNTO 25) /= "000000") ELSE
      "0000000000000000000000000" WHEN Add5_sub_temp(31) = '1' ELSE
      unsigned(Add5_sub_temp(24 DOWNTO 0));

  Add2_add_temp <= resize(Data_Type_Conversion1_out1, 32) + resize(Data_Type_Conversion2_out1, 32);
  
  Add2_out1 <= "1111111111111111111111111" WHEN Add2_add_temp(31 DOWNTO 25) /= "0000000" ELSE
      Add2_add_temp(24 DOWNTO 0);

  
  exp1_out1 <= Add5_out1 WHEN switch_compare_1_4 = '0' ELSE
      Add2_out1;

  Data_Type_Conversion3_out1 <= resize(exp1_out1, 32);

  Normalize_out2_signed <= signed(Normalize_out2);

  Add3_sub_cast <= signed(resize(exp_out1, 32));
  Add3_sub_temp <= Add3_sub_cast - resize(Normalize_out2_signed, 32);
  
  Add3_out1 <= "11111111" WHEN (Add3_sub_temp(31) = '0') AND (Add3_sub_temp(30 DOWNTO 8) /= "00000000000000000000000") ELSE
      "00000000" WHEN Add3_sub_temp(31) = '1' ELSE
      unsigned(Add3_sub_temp(7 DOWNTO 0));

  C_exp <= std_logic_vector(Add3_out1);

  Normalize_out1_unsigned <= unsigned(Normalize_out1);

  Data_Type_Conversion4_out1 <= Normalize_out1_unsigned(22 DOWNTO 0);

  C_frac <= std_logic_vector(Data_Type_Conversion4_out1);

END rtl;

