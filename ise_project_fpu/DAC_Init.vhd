-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\DAC_Init.vhd
-- Created: 2013-02-23 10:31:21
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DAC_Init
-- Source Path: analog_mod/DAC_Init
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.analog_mod_pkg.ALL;

ENTITY DAC_Init IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        amp_scale                         :   IN    std_logic_vector(0 TO 7);  -- boolean [8]
        led_on                            :   OUT   std_logic;
        DAC_CS                            :   OUT   std_logic;
        SPI_clock                         :   OUT   std_logic;
        DAC_CLR                           :   OUT   std_logic;
        AMP_CS                            :   OUT   std_logic;
        AD_CONV                           :   OUT   std_logic;
        AMP_SHDN                          :   OUT   std_logic;
        SPI_mosi                          :   OUT   std_logic
        );
END DAC_Init;


ARCHITECTURE rtl OF DAC_Init IS

  -- Signals
  SIGNAL is_DAC_Init                      : T_state_type_is_DAC_Init;  -- uint8
  SIGNAL ind1                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL led_on_reg                       : std_logic;
  SIGNAL DAC_CS_reg                       : std_logic;
  SIGNAL SPI_clock_reg                    : std_logic;
  SIGNAL DAC_CLR_reg                      : std_logic;
  SIGNAL AMP_CS_reg                       : std_logic;
  SIGNAL AD_CONV_reg                      : std_logic;
  SIGNAL AMP_SHDN_reg                     : std_logic;
  SIGNAL SPI_mosi_reg                     : std_logic;
  SIGNAL is_DAC_Init_next                 : T_state_type_is_DAC_Init;  -- enumerated type (18 enums)
  SIGNAL ind1_next                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL led_on_reg_next                  : std_logic;
  SIGNAL DAC_CS_reg_next                  : std_logic;
  SIGNAL SPI_clock_reg_next               : std_logic;
  SIGNAL DAC_CLR_reg_next                 : std_logic;
  SIGNAL AMP_CS_reg_next                  : std_logic;
  SIGNAL AD_CONV_reg_next                 : std_logic;
  SIGNAL AMP_SHDN_reg_next                : std_logic;
  SIGNAL SPI_mosi_reg_next                : std_logic;

BEGIN
  DAC_Init_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ind1 <= to_unsigned(0, 8);
      led_on_reg <= '0';
      DAC_CS_reg <= '1';
      SPI_clock_reg <= '0';
      DAC_CLR_reg <= '1';
      AMP_CS_reg <= '0';
      AD_CONV_reg <= '0';
      AMP_SHDN_reg <= '0';
      SPI_mosi_reg <= '0';
      is_DAC_Init <= IN_Led_is_Off;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        is_DAC_Init <= is_DAC_Init_next;
        ind1 <= ind1_next;
        led_on_reg <= led_on_reg_next;
        DAC_CS_reg <= DAC_CS_reg_next;
        SPI_clock_reg <= SPI_clock_reg_next;
        DAC_CLR_reg <= DAC_CLR_reg_next;
        AMP_CS_reg <= AMP_CS_reg_next;
        AD_CONV_reg <= AD_CONV_reg_next;
        AMP_SHDN_reg <= AMP_SHDN_reg_next;
        SPI_mosi_reg <= SPI_mosi_reg_next;
      END IF;
    END IF;
  END PROCESS DAC_Init_1_process;

  DAC_Init_1_output : PROCESS (is_DAC_Init, ind1, amp_scale, led_on_reg, DAC_CS_reg, SPI_clock_reg, DAC_CLR_reg, 
      AMP_CS_reg, AD_CONV_reg, AMP_SHDN_reg, SPI_mosi_reg)
  BEGIN
    is_DAC_Init_next <= is_DAC_Init;
    ind1_next <= ind1;
    led_on_reg_next <= led_on_reg;
    DAC_CS_reg_next <= DAC_CS_reg;
    SPI_clock_reg_next <= SPI_clock_reg;
    DAC_CLR_reg_next <= DAC_CLR_reg;
    AMP_CS_reg_next <= AMP_CS_reg;
    AD_CONV_reg_next <= AD_CONV_reg;
    AMP_SHDN_reg_next <= AMP_SHDN_reg;
    SPI_mosi_reg_next <= SPI_mosi_reg;

    CASE is_DAC_Init IS
      WHEN IN_AMP_Init =>
        ind1_next <= to_unsigned(0, 8);
        AMP_CS_reg_next <= '0';
        SPI_mosi_reg_next <= amp_scale(0);
        is_DAC_Init_next <= IN_AMP_Init1;
      WHEN IN_AMP_Init1 =>
        is_DAC_Init_next <= IN_Wait1;
      WHEN IN_DAC_init =>
        IF ind1 < 255 THEN 
          ind1_next <= ind1 + 1;
          is_DAC_Init_next <= IN_Wait3;
        ELSE 
          DAC_CLR_reg_next <= '0';
          is_DAC_Init_next <= IN_Wait6;
        END IF;
      WHEN IN_End_Init =>
        is_DAC_Init_next <= IN_Led_is_Off;
      WHEN IN_Led_is_Off =>
        IF led_on_reg = '0' THEN 
          SPI_clock_reg_next <= '0';
          DAC_CS_reg_next <= '1';
          DAC_CLR_reg_next <= '1';
          AMP_CS_reg_next <= '1';
          AMP_SHDN_reg_next <= '0';
          --AMP_SHDN=1;
          AD_CONV_reg_next <= '0';
          ind1_next <= to_unsigned(0, 8);
          is_DAC_Init_next <= IN_DAC_init;
        END IF;
      WHEN IN_Wait1 =>
        is_DAC_Init_next <= IN_Wait10;
      WHEN IN_Wait10 =>
        SPI_clock_reg_next <= '1';
        ind1_next <= ind1 + 1;
        is_DAC_Init_next <= IN_Wait11;
      WHEN IN_Wait11 =>
        is_DAC_Init_next <= IN_Wait12;
      WHEN IN_Wait12 =>
        is_DAC_Init_next <= IN_Wait13;
      WHEN IN_Wait13 =>
        SPI_clock_reg_next <= '0';
        IF ind1 < 8 THEN 
          SPI_mosi_reg_next <= amp_scale(to_integer(ind1));
          is_DAC_Init_next <= IN_AMP_Init1;
        ELSE 
          is_DAC_Init_next <= IN_Wait14;
        END IF;
      WHEN IN_Wait14 =>
        is_DAC_Init_next <= IN_Wait15;
      WHEN IN_Wait15 =>
        is_DAC_Init_next <= IN_Wait16;
      WHEN IN_Wait16 =>
        AMP_CS_reg_next <= '1';
        SPI_mosi_reg_next <= '0';
        led_on_reg_next <= '1';
        is_DAC_Init_next <= IN_End_Init;
      WHEN IN_Wait3 =>
        is_DAC_Init_next <= IN_Wait9;
      WHEN IN_Wait6 =>
        DAC_CLR_reg_next <= '1';
        --led_on=1;
        is_DAC_Init_next <= IN_AMP_Init;
      WHEN IN_Wait7 =>
        IF ind1 < 255 THEN 
          ind1_next <= ind1 + 1;
          is_DAC_Init_next <= IN_Wait3;
        ELSE 
          DAC_CLR_reg_next <= '0';
          is_DAC_Init_next <= IN_Wait6;
        END IF;
      WHEN IN_Wait8 =>
        is_DAC_Init_next <= IN_Wait7;
      WHEN IN_Wait9 =>
        is_DAC_Init_next <= IN_Wait8;
      WHEN OTHERS => 
        is_DAC_Init_next <= IN_Led_is_Off;
    END CASE;

  END PROCESS DAC_Init_1_output;

  led_on <= led_on_reg_next;
  DAC_CS <= DAC_CS_reg_next;
  SPI_clock <= SPI_clock_reg_next;
  DAC_CLR <= DAC_CLR_reg_next;
  AMP_CS <= AMP_CS_reg_next;
  AD_CONV <= AD_CONV_reg_next;
  AMP_SHDN <= AMP_SHDN_reg_next;
  SPI_mosi <= SPI_mosi_reg_next;

END rtl;

