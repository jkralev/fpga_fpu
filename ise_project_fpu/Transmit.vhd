-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\Transmit.vhd
-- Created: 2013-02-08 12:50:01
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Transmit
-- Source Path: test_lan/Transmit
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.test_lan_pkg.ALL;

ENTITY Transmit IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Data                              :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ev                                :   IN    std_logic;
        btn                               :   IN    std_logic;
        next_rdy                          :   IN    std_logic;
        psize                             :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
        TX_DATA                           :   OUT   std_logic_vector(0 TO 3);  -- boolean [4]
        TX_EN                             :   OUT   std_logic;
        ind1                              :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        get_next                          :   OUT   std_logic
        );
END Transmit;


ARCHITECTURE rtl OF Transmit IS

  -- Constants
  CONSTANT gen_poly                       : unsigned(31 DOWNTO 0) := to_unsigned(79764919, 32);  -- uint32

  -- Signals
  SIGNAL Data_unsigned                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL psize_unsigned                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL is_Transmit                      : T_state_type_is_Transmit;  -- uint8
  SIGNAL ind1_tmp                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL CRC                              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL buf_tx                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL TX_DATA_reg                      : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL TX_EN_reg                        : std_logic;
  SIGNAL ind1_reg                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL get_next_reg                     : std_logic;
  SIGNAL is_Transmit_next                 : T_state_type_is_Transmit;  -- enumerated type (10 enums)
  SIGNAL CRC_next                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL buf_tx_next                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL TX_DATA_reg_next                 : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL TX_EN_reg_next                   : std_logic;
  SIGNAL ind1_reg_next                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL get_next_reg_next                : std_logic;

BEGIN
  Data_unsigned <= unsigned(Data);

  psize_unsigned <= unsigned(psize);

  Transmit_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CRC <= to_unsigned(0, 32);
      buf_tx <= to_unsigned(0, 8);
      TX_DATA_reg <= (OTHERS => '0');
      TX_EN_reg <= '1';
      ind1_reg <= to_unsigned(0, 11);
      get_next_reg <= '0';
      is_Transmit <= IN_Start_tx;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        is_Transmit <= is_Transmit_next;
        CRC <= CRC_next;
        buf_tx <= buf_tx_next;
        TX_DATA_reg <= TX_DATA_reg_next;
        TX_EN_reg <= TX_EN_reg_next;
        ind1_reg <= ind1_reg_next;
        get_next_reg <= get_next_reg_next;
      END IF;
    END IF;
  END PROCESS Transmit_1_process;

  Transmit_1_output : PROCESS (is_Transmit, Data_unsigned, ev, btn, CRC, next_rdy, buf_tx, psize_unsigned, TX_DATA_reg, 
      TX_EN_reg, ind1_reg, get_next_reg)
    VARIABLE buf_bit : std_logic;
    VARIABLE buf32 : signed(31 DOWNTO 0);
    VARIABLE CRC_temp : unsigned(31 DOWNTO 0);
    VARIABLE ind1_reg_temp : unsigned(10 DOWNTO 0);
    VARIABLE buf32_0 : signed(31 DOWNTO 0);
    VARIABLE buf32_1 : signed(31 DOWNTO 0);
    VARIABLE crc_temp_0 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_0 : std_logic;
    VARIABLE buf32_2 : signed(31 DOWNTO 0);
    VARIABLE buf32_3 : signed(31 DOWNTO 0);
    VARIABLE buf32_4 : signed(31 DOWNTO 0);
    VARIABLE crc_temp_1 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_1 : std_logic;
    VARIABLE buf32_5 : signed(31 DOWNTO 0);
    VARIABLE buf32_6 : signed(31 DOWNTO 0);
    VARIABLE buf32_7 : signed(31 DOWNTO 0);
    VARIABLE crc_temp_2 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_2 : std_logic;
    VARIABLE buf32_8 : signed(31 DOWNTO 0);
    VARIABLE buf32_9 : signed(31 DOWNTO 0);
    VARIABLE buf32_10 : signed(31 DOWNTO 0);
    VARIABLE crc_temp_3 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_3 : std_logic;
    VARIABLE buf32_11 : signed(31 DOWNTO 0);
    VARIABLE buf32_12 : signed(31 DOWNTO 0);
    VARIABLE buf32_13 : signed(31 DOWNTO 0);
    VARIABLE crc_temp_4 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_4 : std_logic;
    VARIABLE buf32_14 : signed(31 DOWNTO 0);
    VARIABLE buf32_15 : signed(31 DOWNTO 0);
    VARIABLE buf32_16 : signed(31 DOWNTO 0);
    VARIABLE crc_temp_5 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_5 : std_logic;
    VARIABLE buf32_17 : signed(31 DOWNTO 0);
    VARIABLE buf32_18 : signed(31 DOWNTO 0);
    VARIABLE buf32_19 : signed(31 DOWNTO 0);
    VARIABLE crc_temp_6 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_6 : std_logic;
    VARIABLE buf32_20 : signed(31 DOWNTO 0);
    VARIABLE buf32_21 : signed(31 DOWNTO 0);
    VARIABLE buf_bit_7 : std_logic;
    VARIABLE crc_temp_7 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_8 : std_logic;
    VARIABLE crc_temp_8 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_9 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_9 : std_logic;
    VARIABLE crc_temp_10 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_11 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_10 : std_logic;
    VARIABLE crc_temp_12 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_13 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_11 : std_logic;
    VARIABLE crc_temp_14 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_15 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_12 : std_logic;
    VARIABLE crc_temp_16 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_17 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_13 : std_logic;
    VARIABLE crc_temp_18 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_19 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_14 : std_logic;
    VARIABLE crc_temp_20 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_21 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_15 : std_logic;
    VARIABLE crc_temp_22 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_23 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_16 : std_logic;
    VARIABLE crc_temp_24 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_25 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_17 : std_logic;
    VARIABLE crc_temp_26 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_27 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_18 : std_logic;
    VARIABLE crc_temp_28 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_29 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_19 : std_logic;
    VARIABLE crc_temp_30 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_31 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_20 : std_logic;
    VARIABLE crc_temp_32 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_33 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_21 : std_logic;
    VARIABLE crc_temp_34 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_35 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_22 : std_logic;
    VARIABLE crc_temp_36 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_37 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_23 : std_logic;
    VARIABLE crc_temp_38 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_39 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_24 : std_logic;
    VARIABLE crc_temp_40 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_41 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_25 : std_logic;
    VARIABLE crc_temp_42 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_43 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_26 : std_logic;
    VARIABLE crc_temp_44 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_45 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_27 : std_logic;
    VARIABLE crc_temp_46 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_47 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_28 : std_logic;
    VARIABLE crc_temp_48 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_49 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_29 : std_logic;
    VARIABLE crc_temp_50 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_51 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_30 : std_logic;
    VARIABLE crc_temp_52 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_53 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_31 : std_logic;
    VARIABLE crc_temp_54 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_55 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_32 : std_logic;
    VARIABLE crc_temp_56 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_57 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_33 : std_logic;
    VARIABLE crc_temp_58 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_59 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_34 : std_logic;
    VARIABLE crc_temp_60 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_61 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_35 : std_logic;
    VARIABLE crc_temp_62 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_63 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_36 : std_logic;
    VARIABLE crc_temp_64 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_65 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_37 : std_logic;
    VARIABLE crc_temp_66 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_67 : unsigned(31 DOWNTO 0);
    VARIABLE buf_bit_38 : std_logic;
    VARIABLE crc_temp_68 : unsigned(31 DOWNTO 0);
    VARIABLE crc_temp_69 : unsigned(31 DOWNTO 0);
    VARIABLE cast : unsigned(7 DOWNTO 0);
    VARIABLE cast_0 : unsigned(7 DOWNTO 0);
    VARIABLE cast_1 : unsigned(7 DOWNTO 0);
    VARIABLE cast_2 : std_logic;
    VARIABLE cast_3 : unsigned(31 DOWNTO 0);
    VARIABLE cast_4 : unsigned(7 DOWNTO 0);
    VARIABLE cast_5 : unsigned(7 DOWNTO 0);
    VARIABLE cast_6 : unsigned(6 DOWNTO 0);
    VARIABLE cast_7 : unsigned(6 DOWNTO 0);
    VARIABLE cast_8 : std_logic;
    VARIABLE cast_9 : unsigned(31 DOWNTO 0);
    VARIABLE cast_10 : unsigned(7 DOWNTO 0);
    VARIABLE cast_11 : unsigned(7 DOWNTO 0);
    VARIABLE cast_12 : unsigned(5 DOWNTO 0);
    VARIABLE cast_13 : unsigned(5 DOWNTO 0);
    VARIABLE cast_14 : std_logic;
    VARIABLE cast_15 : unsigned(31 DOWNTO 0);
    VARIABLE cast_16 : unsigned(7 DOWNTO 0);
    VARIABLE cast_17 : unsigned(7 DOWNTO 0);
    VARIABLE cast_18 : unsigned(4 DOWNTO 0);
    VARIABLE cast_19 : unsigned(4 DOWNTO 0);
    VARIABLE cast_20 : std_logic;
    VARIABLE cast_21 : unsigned(31 DOWNTO 0);
    VARIABLE cast_22 : unsigned(7 DOWNTO 0);
    VARIABLE cast_23 : unsigned(7 DOWNTO 0);
    VARIABLE cast_24 : unsigned(3 DOWNTO 0);
    VARIABLE cast_25 : unsigned(3 DOWNTO 0);
    VARIABLE cast_26 : std_logic;
    VARIABLE cast_27 : unsigned(31 DOWNTO 0);
    VARIABLE cast_28 : unsigned(7 DOWNTO 0);
    VARIABLE cast_29 : unsigned(7 DOWNTO 0);
    VARIABLE cast_30 : unsigned(2 DOWNTO 0);
    VARIABLE cast_31 : unsigned(2 DOWNTO 0);
    VARIABLE cast_32 : std_logic;
    VARIABLE cast_33 : unsigned(31 DOWNTO 0);
    VARIABLE cast_34 : unsigned(7 DOWNTO 0);
    VARIABLE cast_35 : unsigned(7 DOWNTO 0);
    VARIABLE cast_36 : unsigned(1 DOWNTO 0);
    VARIABLE cast_37 : unsigned(1 DOWNTO 0);
    VARIABLE cast_38 : std_logic;
    VARIABLE cast_39 : unsigned(31 DOWNTO 0);
    VARIABLE cast_40 : unsigned(7 DOWNTO 0);
    VARIABLE cast_41 : unsigned(7 DOWNTO 0);
    VARIABLE cast_42 : std_logic;
    VARIABLE cast_43 : unsigned(31 DOWNTO 0);
  BEGIN
    CRC_temp := CRC;
    buf_tx_next <= buf_tx;
    ind1_reg_temp := ind1_reg;
    is_Transmit_next <= is_Transmit;
    TX_DATA_reg_next <= TX_DATA_reg;
    TX_EN_reg_next <= TX_EN_reg;
    get_next_reg_next <= get_next_reg;

    CASE is_Transmit IS
      WHEN IN_CRC_end =>
        IF ev = '0' THEN 
          IF ind1_reg < 8 THEN 
            IF (CRC srl 31) /= 0 THEN 
              TX_DATA_reg_next(0) <= '1';
            ELSE 
              TX_DATA_reg_next(0) <= '0';
            END IF;
            IF (resize(CRC srl 30, 2) AND to_unsigned(1, 2)) /= 0 THEN 
              TX_DATA_reg_next(1) <= '1';
            ELSE 
              TX_DATA_reg_next(1) <= '0';
            END IF;
            IF (resize(CRC srl 29, 3) AND to_unsigned(1, 3)) /= 0 THEN 
              TX_DATA_reg_next(2) <= '1';
            ELSE 
              TX_DATA_reg_next(2) <= '0';
            END IF;
            IF (resize(CRC srl 28, 4) AND to_unsigned(1, 4)) /= 0 THEN 
              TX_DATA_reg_next(3) <= '1';
            ELSE 
              TX_DATA_reg_next(3) <= '0';
            END IF;
            CRC_temp := CRC sll 4;
            is_Transmit_next <= IN_Wait_for_ev1;
          ELSE 
            TX_EN_reg_next <= '0';
            is_Transmit_next <= IN_Wait10;
          END IF;
        END IF;
      WHEN IN_Data_Ready =>
        IF ev = '0' THEN 
          IF TX_EN_reg = '0' THEN 
            ind1_reg_temp := to_unsigned(0, 11);
            TX_EN_reg_next <= '1';
          END IF;
          IF (buf_tx AND to_unsigned(1, 8)) /= 0 THEN 
            TX_DATA_reg_next(0) <= '1';
          ELSE 
            TX_DATA_reg_next(0) <= '0';
          END IF;
          IF (buf_tx AND to_unsigned(2, 8)) /= 0 THEN 
            TX_DATA_reg_next(1) <= '1';
          ELSE 
            TX_DATA_reg_next(1) <= '0';
          END IF;
          IF (buf_tx AND to_unsigned(4, 8)) /= 0 THEN 
            TX_DATA_reg_next(2) <= '1';
          ELSE 
            TX_DATA_reg_next(2) <= '0';
          END IF;
          IF (buf_tx AND to_unsigned(8, 8)) /= 0 THEN 
            TX_DATA_reg_next(3) <= '1';
          ELSE 
            TX_DATA_reg_next(3) <= '0';
          END IF;
          is_Transmit_next <= IN_Wait_for_ev;
        END IF;
      WHEN IN_Get_Data =>
        IF next_rdy = '1' THEN 
          buf_tx_next <= Data_unsigned;
          get_next_reg_next <= '0';
          --11
          IF ind1_reg > 11 THEN 
            IF (CRC srl 31) /= 0 THEN 
              buf_bit := '1';
            ELSE 
              buf_bit := '0';
            END IF;
            buf32 := signed(resize(Data_unsigned, 32));
            cast := unsigned(buf32(7 DOWNTO 0));
            buf32_0 := signed(resize(cast, 32));
            cast_0 := unsigned(buf32_0(7 DOWNTO 0));
            cast_1 := cast_0 AND to_unsigned(1, 8);
            buf32_1 := signed(resize(cast_1, 32));
            cast_2 := buf32_1(0);
            cast_3 := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & cast_2;
            crc_temp_0 := (CRC sll 1) OR cast_3;
            IF buf_bit = '1' THEN 
              crc_temp_0 := crc_temp_0 XOR gen_poly;
            END IF;
            IF (crc_temp_0 srl 31) /= 0 THEN 
              buf_bit_0 := '1';
            ELSE 
              buf_bit_0 := '0';
            END IF;
            buf32_2 := signed(resize(Data_unsigned, 32));
            cast_4 := unsigned(buf32_2(7 DOWNTO 0));
            cast_5 := cast_4 srl 1;
            buf32_3 := signed(resize(cast_5, 32));
            cast_6 := unsigned(buf32_3(6 DOWNTO 0));
            cast_7 := cast_6 AND to_unsigned(1, 7);
            buf32_4 := signed(resize(cast_7, 32));
            cast_8 := buf32_4(0);
            cast_9 := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & cast_8;
            crc_temp_1 := (crc_temp_0 sll 1) OR cast_9;
            IF buf_bit_0 = '1' THEN 
              crc_temp_1 := crc_temp_1 XOR gen_poly;
            END IF;
            IF (crc_temp_1 srl 31) /= 0 THEN 
              buf_bit_1 := '1';
            ELSE 
              buf_bit_1 := '0';
            END IF;
            buf32_5 := signed(resize(Data_unsigned, 32));
            cast_10 := unsigned(buf32_5(7 DOWNTO 0));
            cast_11 := cast_10 srl 2;
            buf32_6 := signed(resize(cast_11, 32));
            cast_12 := unsigned(buf32_6(5 DOWNTO 0));
            cast_13 := cast_12 AND to_unsigned(1, 6);
            buf32_7 := signed(resize(cast_13, 32));
            cast_14 := buf32_7(0);
            cast_15 := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & cast_14;
            crc_temp_2 := (crc_temp_1 sll 1) OR cast_15;
            IF buf_bit_1 = '1' THEN 
              crc_temp_2 := crc_temp_2 XOR gen_poly;
            END IF;
            IF (crc_temp_2 srl 31) /= 0 THEN 
              buf_bit_2 := '1';
            ELSE 
              buf_bit_2 := '0';
            END IF;
            buf32_8 := signed(resize(Data_unsigned, 32));
            cast_16 := unsigned(buf32_8(7 DOWNTO 0));
            cast_17 := cast_16 srl 3;
            buf32_9 := signed(resize(cast_17, 32));
            cast_18 := unsigned(buf32_9(4 DOWNTO 0));
            cast_19 := cast_18 AND to_unsigned(1, 5);
            buf32_10 := signed(resize(cast_19, 32));
            cast_20 := buf32_10(0);
            cast_21 := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & cast_20;
            crc_temp_3 := (crc_temp_2 sll 1) OR cast_21;
            IF buf_bit_2 = '1' THEN 
              crc_temp_3 := crc_temp_3 XOR gen_poly;
            END IF;
            IF (crc_temp_3 srl 31) /= 0 THEN 
              buf_bit_3 := '1';
            ELSE 
              buf_bit_3 := '0';
            END IF;
            buf32_11 := signed(resize(Data_unsigned, 32));
            cast_22 := unsigned(buf32_11(7 DOWNTO 0));
            cast_23 := cast_22 srl 4;
            buf32_12 := signed(resize(cast_23, 32));
            cast_24 := unsigned(buf32_12(3 DOWNTO 0));
            cast_25 := cast_24 AND to_unsigned(1, 4);
            buf32_13 := signed(resize(cast_25, 32));
            cast_26 := buf32_13(0);
            cast_27 := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & cast_26;
            crc_temp_4 := (crc_temp_3 sll 1) OR cast_27;
            IF buf_bit_3 = '1' THEN 
              crc_temp_4 := crc_temp_4 XOR gen_poly;
            END IF;
            IF (crc_temp_4 srl 31) /= 0 THEN 
              buf_bit_4 := '1';
            ELSE 
              buf_bit_4 := '0';
            END IF;
            buf32_14 := signed(resize(Data_unsigned, 32));
            cast_28 := unsigned(buf32_14(7 DOWNTO 0));
            cast_29 := cast_28 srl 5;
            buf32_15 := signed(resize(cast_29, 32));
            cast_30 := unsigned(buf32_15(2 DOWNTO 0));
            cast_31 := cast_30 AND to_unsigned(1, 3);
            buf32_16 := signed(resize(cast_31, 32));
            cast_32 := buf32_16(0);
            cast_33 := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & cast_32;
            crc_temp_5 := (crc_temp_4 sll 1) OR cast_33;
            IF buf_bit_4 = '1' THEN 
              crc_temp_5 := crc_temp_5 XOR gen_poly;
            END IF;
            IF (crc_temp_5 srl 31) /= 0 THEN 
              buf_bit_5 := '1';
            ELSE 
              buf_bit_5 := '0';
            END IF;
            buf32_17 := signed(resize(Data_unsigned, 32));
            cast_34 := unsigned(buf32_17(7 DOWNTO 0));
            cast_35 := cast_34 srl 6;
            buf32_18 := signed(resize(cast_35, 32));
            cast_36 := unsigned(buf32_18(1 DOWNTO 0));
            cast_37 := cast_36 AND to_unsigned(1, 2);
            buf32_19 := signed(resize(cast_37, 32));
            cast_38 := buf32_19(0);
            cast_39 := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & cast_38;
            crc_temp_6 := (crc_temp_5 sll 1) OR cast_39;
            IF buf_bit_5 = '1' THEN 
              crc_temp_6 := crc_temp_6 XOR gen_poly;
            END IF;
            IF (crc_temp_6 srl 31) /= 0 THEN 
              buf_bit_6 := '1';
            ELSE 
              buf_bit_6 := '0';
            END IF;
            buf32_20 := signed(resize(Data_unsigned, 32));
            cast_40 := unsigned(buf32_20(7 DOWNTO 0));
            cast_41 := cast_40 srl 7;
            buf32_21 := signed(resize(cast_41, 32));
            cast_42 := buf32_21(0);
            cast_43 := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & cast_42;
            CRC_temp := (crc_temp_6 sll 1) OR cast_43;
            IF buf_bit_6 = '1' THEN 
              CRC_temp := CRC_temp XOR gen_poly;
            END IF;
            is_Transmit_next <= IN_Data_Ready;
          ELSE 
            is_Transmit_next <= IN_Data_Ready;
          END IF;
        END IF;
      WHEN IN_Start_tx =>
        IF btn = '1' THEN 
          TX_EN_reg_next <= '0';
          get_next_reg_next <= '0';
          CRC_temp := unsigned'("11110100000110111110111001111010");
          is_Transmit_next <= IN_Wait12;
        END IF;
      WHEN IN_Wait10 =>
        IF btn = '0' THEN 
          is_Transmit_next <= IN_Start_tx;
        END IF;
      WHEN IN_Wait12 =>
        get_next_reg_next <= '1';
        is_Transmit_next <= IN_Get_Data;
      WHEN IN_Wait13 =>
        IF ev = '0' THEN 
          IF (buf_tx AND to_unsigned(16, 8)) /= 0 THEN 
            TX_DATA_reg_next(0) <= '1';
          ELSE 
            TX_DATA_reg_next(0) <= '0';
          END IF;
          IF (buf_tx AND to_unsigned(32, 8)) /= 0 THEN 
            TX_DATA_reg_next(1) <= '1';
          ELSE 
            TX_DATA_reg_next(1) <= '0';
          END IF;
          IF (buf_tx AND to_unsigned(64, 8)) /= 0 THEN 
            TX_DATA_reg_next(2) <= '1';
          ELSE 
            TX_DATA_reg_next(2) <= '0';
          END IF;
          IF (buf_tx AND to_unsigned(128, 8)) /= 0 THEN 
            TX_DATA_reg_next(3) <= '1';
          ELSE 
            TX_DATA_reg_next(3) <= '0';
          END IF;
          is_Transmit_next <= IN_Wait14;
        END IF;
      WHEN IN_Wait14 =>
        IF ev = '1' THEN 
          ind1_reg_temp := ind1_reg + 1;
          --68
          IF ind1_reg_temp < psize_unsigned THEN 
            get_next_reg_next <= '1';
            is_Transmit_next <= IN_Get_Data;
          ELSE 
            buf_tx_next <= to_unsigned(0, 8);
            IF (CRC srl 31) /= 0 THEN 
              buf_bit_7 := '1';
            ELSE 
              buf_bit_7 := '0';
            END IF;
            crc_temp_7 := CRC sll 1;
            IF buf_bit_7 = '1' THEN 
              crc_temp_7 := crc_temp_7 XOR gen_poly;
            END IF;
            IF (crc_temp_7 srl 31) /= 0 THEN 
              buf_bit_8 := '1';
            ELSE 
              buf_bit_8 := '0';
            END IF;
            crc_temp_8 := crc_temp_7 sll 1;
            crc_temp_9 := crc_temp_8;
            IF buf_bit_8 = '1' THEN 
              crc_temp_9 := crc_temp_8 XOR gen_poly;
            END IF;
            IF (crc_temp_9 srl 31) /= 0 THEN 
              buf_bit_9 := '1';
            ELSE 
              buf_bit_9 := '0';
            END IF;
            crc_temp_10 := crc_temp_9 sll 1;
            crc_temp_11 := crc_temp_10;
            IF buf_bit_9 = '1' THEN 
              crc_temp_11 := crc_temp_10 XOR gen_poly;
            END IF;
            IF (crc_temp_11 srl 31) /= 0 THEN 
              buf_bit_10 := '1';
            ELSE 
              buf_bit_10 := '0';
            END IF;
            crc_temp_12 := crc_temp_11 sll 1;
            crc_temp_13 := crc_temp_12;
            IF buf_bit_10 = '1' THEN 
              crc_temp_13 := crc_temp_12 XOR gen_poly;
            END IF;
            IF (crc_temp_13 srl 31) /= 0 THEN 
              buf_bit_11 := '1';
            ELSE 
              buf_bit_11 := '0';
            END IF;
            crc_temp_14 := crc_temp_13 sll 1;
            crc_temp_15 := crc_temp_14;
            IF buf_bit_11 = '1' THEN 
              crc_temp_15 := crc_temp_14 XOR gen_poly;
            END IF;
            IF (crc_temp_15 srl 31) /= 0 THEN 
              buf_bit_12 := '1';
            ELSE 
              buf_bit_12 := '0';
            END IF;
            crc_temp_16 := crc_temp_15 sll 1;
            crc_temp_17 := crc_temp_16;
            IF buf_bit_12 = '1' THEN 
              crc_temp_17 := crc_temp_16 XOR gen_poly;
            END IF;
            IF (crc_temp_17 srl 31) /= 0 THEN 
              buf_bit_13 := '1';
            ELSE 
              buf_bit_13 := '0';
            END IF;
            crc_temp_18 := crc_temp_17 sll 1;
            crc_temp_19 := crc_temp_18;
            IF buf_bit_13 = '1' THEN 
              crc_temp_19 := crc_temp_18 XOR gen_poly;
            END IF;
            IF (crc_temp_19 srl 31) /= 0 THEN 
              buf_bit_14 := '1';
            ELSE 
              buf_bit_14 := '0';
            END IF;
            crc_temp_20 := crc_temp_19 sll 1;
            crc_temp_21 := crc_temp_20;
            IF buf_bit_14 = '1' THEN 
              crc_temp_21 := crc_temp_20 XOR gen_poly;
            END IF;
            IF (crc_temp_21 srl 31) /= 0 THEN 
              buf_bit_15 := '1';
            ELSE 
              buf_bit_15 := '0';
            END IF;
            crc_temp_22 := crc_temp_21 sll 1;
            crc_temp_23 := crc_temp_22;
            IF buf_bit_15 = '1' THEN 
              crc_temp_23 := crc_temp_22 XOR gen_poly;
            END IF;
            IF (crc_temp_23 srl 31) /= 0 THEN 
              buf_bit_16 := '1';
            ELSE 
              buf_bit_16 := '0';
            END IF;
            crc_temp_24 := crc_temp_23 sll 1;
            crc_temp_25 := crc_temp_24;
            IF buf_bit_16 = '1' THEN 
              crc_temp_25 := crc_temp_24 XOR gen_poly;
            END IF;
            IF (crc_temp_25 srl 31) /= 0 THEN 
              buf_bit_17 := '1';
            ELSE 
              buf_bit_17 := '0';
            END IF;
            crc_temp_26 := crc_temp_25 sll 1;
            crc_temp_27 := crc_temp_26;
            IF buf_bit_17 = '1' THEN 
              crc_temp_27 := crc_temp_26 XOR gen_poly;
            END IF;
            IF (crc_temp_27 srl 31) /= 0 THEN 
              buf_bit_18 := '1';
            ELSE 
              buf_bit_18 := '0';
            END IF;
            crc_temp_28 := crc_temp_27 sll 1;
            crc_temp_29 := crc_temp_28;
            IF buf_bit_18 = '1' THEN 
              crc_temp_29 := crc_temp_28 XOR gen_poly;
            END IF;
            IF (crc_temp_29 srl 31) /= 0 THEN 
              buf_bit_19 := '1';
            ELSE 
              buf_bit_19 := '0';
            END IF;
            crc_temp_30 := crc_temp_29 sll 1;
            crc_temp_31 := crc_temp_30;
            IF buf_bit_19 = '1' THEN 
              crc_temp_31 := crc_temp_30 XOR gen_poly;
            END IF;
            IF (crc_temp_31 srl 31) /= 0 THEN 
              buf_bit_20 := '1';
            ELSE 
              buf_bit_20 := '0';
            END IF;
            crc_temp_32 := crc_temp_31 sll 1;
            crc_temp_33 := crc_temp_32;
            IF buf_bit_20 = '1' THEN 
              crc_temp_33 := crc_temp_32 XOR gen_poly;
            END IF;
            IF (crc_temp_33 srl 31) /= 0 THEN 
              buf_bit_21 := '1';
            ELSE 
              buf_bit_21 := '0';
            END IF;
            crc_temp_34 := crc_temp_33 sll 1;
            crc_temp_35 := crc_temp_34;
            IF buf_bit_21 = '1' THEN 
              crc_temp_35 := crc_temp_34 XOR gen_poly;
            END IF;
            IF (crc_temp_35 srl 31) /= 0 THEN 
              buf_bit_22 := '1';
            ELSE 
              buf_bit_22 := '0';
            END IF;
            crc_temp_36 := crc_temp_35 sll 1;
            crc_temp_37 := crc_temp_36;
            IF buf_bit_22 = '1' THEN 
              crc_temp_37 := crc_temp_36 XOR gen_poly;
            END IF;
            IF (crc_temp_37 srl 31) /= 0 THEN 
              buf_bit_23 := '1';
            ELSE 
              buf_bit_23 := '0';
            END IF;
            crc_temp_38 := crc_temp_37 sll 1;
            crc_temp_39 := crc_temp_38;
            IF buf_bit_23 = '1' THEN 
              crc_temp_39 := crc_temp_38 XOR gen_poly;
            END IF;
            IF (crc_temp_39 srl 31) /= 0 THEN 
              buf_bit_24 := '1';
            ELSE 
              buf_bit_24 := '0';
            END IF;
            crc_temp_40 := crc_temp_39 sll 1;
            crc_temp_41 := crc_temp_40;
            IF buf_bit_24 = '1' THEN 
              crc_temp_41 := crc_temp_40 XOR gen_poly;
            END IF;
            IF (crc_temp_41 srl 31) /= 0 THEN 
              buf_bit_25 := '1';
            ELSE 
              buf_bit_25 := '0';
            END IF;
            crc_temp_42 := crc_temp_41 sll 1;
            crc_temp_43 := crc_temp_42;
            IF buf_bit_25 = '1' THEN 
              crc_temp_43 := crc_temp_42 XOR gen_poly;
            END IF;
            IF (crc_temp_43 srl 31) /= 0 THEN 
              buf_bit_26 := '1';
            ELSE 
              buf_bit_26 := '0';
            END IF;
            crc_temp_44 := crc_temp_43 sll 1;
            crc_temp_45 := crc_temp_44;
            IF buf_bit_26 = '1' THEN 
              crc_temp_45 := crc_temp_44 XOR gen_poly;
            END IF;
            IF (crc_temp_45 srl 31) /= 0 THEN 
              buf_bit_27 := '1';
            ELSE 
              buf_bit_27 := '0';
            END IF;
            crc_temp_46 := crc_temp_45 sll 1;
            crc_temp_47 := crc_temp_46;
            IF buf_bit_27 = '1' THEN 
              crc_temp_47 := crc_temp_46 XOR gen_poly;
            END IF;
            IF (crc_temp_47 srl 31) /= 0 THEN 
              buf_bit_28 := '1';
            ELSE 
              buf_bit_28 := '0';
            END IF;
            crc_temp_48 := crc_temp_47 sll 1;
            crc_temp_49 := crc_temp_48;
            IF buf_bit_28 = '1' THEN 
              crc_temp_49 := crc_temp_48 XOR gen_poly;
            END IF;
            IF (crc_temp_49 srl 31) /= 0 THEN 
              buf_bit_29 := '1';
            ELSE 
              buf_bit_29 := '0';
            END IF;
            crc_temp_50 := crc_temp_49 sll 1;
            crc_temp_51 := crc_temp_50;
            IF buf_bit_29 = '1' THEN 
              crc_temp_51 := crc_temp_50 XOR gen_poly;
            END IF;
            IF (crc_temp_51 srl 31) /= 0 THEN 
              buf_bit_30 := '1';
            ELSE 
              buf_bit_30 := '0';
            END IF;
            crc_temp_52 := crc_temp_51 sll 1;
            crc_temp_53 := crc_temp_52;
            IF buf_bit_30 = '1' THEN 
              crc_temp_53 := crc_temp_52 XOR gen_poly;
            END IF;
            IF (crc_temp_53 srl 31) /= 0 THEN 
              buf_bit_31 := '1';
            ELSE 
              buf_bit_31 := '0';
            END IF;
            crc_temp_54 := crc_temp_53 sll 1;
            crc_temp_55 := crc_temp_54;
            IF buf_bit_31 = '1' THEN 
              crc_temp_55 := crc_temp_54 XOR gen_poly;
            END IF;
            IF (crc_temp_55 srl 31) /= 0 THEN 
              buf_bit_32 := '1';
            ELSE 
              buf_bit_32 := '0';
            END IF;
            crc_temp_56 := crc_temp_55 sll 1;
            crc_temp_57 := crc_temp_56;
            IF buf_bit_32 = '1' THEN 
              crc_temp_57 := crc_temp_56 XOR gen_poly;
            END IF;
            IF (crc_temp_57 srl 31) /= 0 THEN 
              buf_bit_33 := '1';
            ELSE 
              buf_bit_33 := '0';
            END IF;
            crc_temp_58 := crc_temp_57 sll 1;
            crc_temp_59 := crc_temp_58;
            IF buf_bit_33 = '1' THEN 
              crc_temp_59 := crc_temp_58 XOR gen_poly;
            END IF;
            IF (crc_temp_59 srl 31) /= 0 THEN 
              buf_bit_34 := '1';
            ELSE 
              buf_bit_34 := '0';
            END IF;
            crc_temp_60 := crc_temp_59 sll 1;
            crc_temp_61 := crc_temp_60;
            IF buf_bit_34 = '1' THEN 
              crc_temp_61 := crc_temp_60 XOR gen_poly;
            END IF;
            IF (crc_temp_61 srl 31) /= 0 THEN 
              buf_bit_35 := '1';
            ELSE 
              buf_bit_35 := '0';
            END IF;
            crc_temp_62 := crc_temp_61 sll 1;
            crc_temp_63 := crc_temp_62;
            IF buf_bit_35 = '1' THEN 
              crc_temp_63 := crc_temp_62 XOR gen_poly;
            END IF;
            IF (crc_temp_63 srl 31) /= 0 THEN 
              buf_bit_36 := '1';
            ELSE 
              buf_bit_36 := '0';
            END IF;
            crc_temp_64 := crc_temp_63 sll 1;
            crc_temp_65 := crc_temp_64;
            IF buf_bit_36 = '1' THEN 
              crc_temp_65 := crc_temp_64 XOR gen_poly;
            END IF;
            IF (crc_temp_65 srl 31) /= 0 THEN 
              buf_bit_37 := '1';
            ELSE 
              buf_bit_37 := '0';
            END IF;
            crc_temp_66 := crc_temp_65 sll 1;
            crc_temp_67 := crc_temp_66;
            IF buf_bit_37 = '1' THEN 
              crc_temp_67 := crc_temp_66 XOR gen_poly;
            END IF;
            IF (crc_temp_67 srl 31) /= 0 THEN 
              buf_bit_38 := '1';
            ELSE 
              buf_bit_38 := '0';
            END IF;
            crc_temp_68 := crc_temp_67 sll 1;
            crc_temp_69 := crc_temp_68;
            IF buf_bit_38 = '1' THEN 
              crc_temp_69 := crc_temp_68 XOR gen_poly;
            END IF;
            ind1_reg_temp := to_unsigned(0, 11);
            CRC_temp :=  NOT crc_temp_69;
            is_Transmit_next <= IN_CRC_end;
          END IF;
        END IF;
      WHEN IN_Wait_for_ev =>
        IF ev = '1' THEN 
          is_Transmit_next <= IN_Wait13;
        END IF;
      WHEN IN_Wait_for_ev1 =>
        IF ev = '1' THEN 
          ind1_reg_temp := ind1_reg + 1;
          is_Transmit_next <= IN_CRC_end;
        END IF;
      WHEN OTHERS => 
        is_Transmit_next <= IN_Start_tx;
    END CASE;

    CRC_next <= CRC_temp;
    ind1_reg_next <= ind1_reg_temp;
  END PROCESS Transmit_1_output;

  TX_DATA <= TX_DATA_reg_next;
  TX_EN <= TX_EN_reg_next;
  ind1_tmp <= ind1_reg_next;
  get_next <= get_next_reg_next;

  ind1 <= std_logic_vector(ind1_tmp);

END rtl;

