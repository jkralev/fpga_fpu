-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\Output_register.vhd
-- Created: 2013-04-29 19:25:11
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Output_register
-- Source Path: analog_ext/Output_register
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Output_register IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        data                              :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
        trig1                             :   IN    std_logic;
        trig2                             :   IN    real;  -- double
        Out1                              :   OUT   std_logic_vector(0 TO 11);  -- boolean [12]
        Out2                              :   OUT   std_logic_vector(0 TO 11)  -- boolean [12]
        );
END Output_register;


ARCHITECTURE rtl OF Output_register IS

  -- Signals
  SIGNAL sig_reg_out1                     : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Switch1_out1                     : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL sig_reg1_out1                    : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Switch2_out1                     : std_logic_vector(0 TO 11);  -- boolean [12]

BEGIN
  
  Switch1_out1 <= sig_reg_out1 WHEN trig1 = '0' ELSE
      data;

  sig_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sig_reg_out1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sig_reg_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS sig_reg_process;


  Out1 <= sig_reg_out1;

  
  Switch2_out1 <= sig_reg1_out1 WHEN trig2 = 0.0 ELSE
      data;

  sig_reg1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sig_reg1_out1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sig_reg1_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS sig_reg1_process;


  Out2 <= sig_reg1_out1;

END rtl;

