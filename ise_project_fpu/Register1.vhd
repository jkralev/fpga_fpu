-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\Register1.vhd
-- Created: 2013-03-14 17:42:03
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Register1
-- Source Path: ivedsp/IN_OUT_Controller/Register1
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ivedsp_pkg.ALL;

ENTITY Register1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Data                              :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
        DAC_N                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        Enable                            :   IN    std_logic;
        DAC                               :   OUT   vector_of_std_logic_vector8(0 TO 7)  -- uint8 [8]
        );
END Register1;


ARCHITECTURE rtl OF Register1 IS

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Enable_out3                      : std_logic;
  SIGNAL DAC_N_unsigned                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Data_unsigned                    : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL DAC_A_out1                       : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Switch1_out1                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL DAC_B_out1                       : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Switch2_out1                     : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Mux_out1                         : vector_of_unsigned8(0 TO 7);  -- uint8 [8]
  SIGNAL Mux_out1_last_value              : vector_of_unsigned8(0 TO 7);  -- uint8 [8]
  SIGNAL Mux_out1_bypass                  : vector_of_unsigned8(0 TO 7);  -- uint8 [8]

BEGIN
  Enable_out3 <= Enable;

  DAC_N_unsigned <= unsigned(DAC_N);

  
  Compare_To_Constant_out1 <= '1' WHEN DAC_N_unsigned = 10 ELSE
      '0';

  outputgen1: FOR k IN 0 TO 3 GENERATE
    Data_unsigned(k) <= unsigned(Data(k));
  END GENERATE;

  enb_gated <= Enable_out3 AND enb;

  
  Switch1_out1 <= DAC_A_out1 WHEN Compare_To_Constant_out1 = '0' ELSE
      Data_unsigned;

  DAC_A_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      DAC_A_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        DAC_A_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS DAC_A_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN DAC_N_unsigned = 11 ELSE
      '0';

  
  Switch2_out1 <= DAC_B_out1 WHEN Compare_To_Constant1_out1 = '0' ELSE
      Data_unsigned;

  DAC_B_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      DAC_B_out1 <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        DAC_B_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS DAC_B_process;


  Mux_out1(0) <= DAC_A_out1(0);
  Mux_out1(1) <= DAC_A_out1(1);
  Mux_out1(2) <= DAC_A_out1(2);
  Mux_out1(3) <= DAC_A_out1(3);
  Mux_out1(4) <= DAC_B_out1(0);
  Mux_out1(5) <= DAC_B_out1(1);
  Mux_out1(6) <= DAC_B_out1(2);
  Mux_out1(7) <= DAC_B_out1(3);

  DAC_bypass_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Mux_out1_last_value <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Mux_out1_last_value <= Mux_out1;
      END IF;
    END IF;
  END PROCESS DAC_bypass_process;

  Mux_out1_bypass <= Mux_out1 WHEN Enable_out3 = '1' ELSE
                     Mux_out1_last_value;

  outputgen: FOR k IN 0 TO 7 GENERATE
    DAC(k) <= std_logic_vector(Mux_out1_bypass(k));
  END GENERATE;

END rtl;

