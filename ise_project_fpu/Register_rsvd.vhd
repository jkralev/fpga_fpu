-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\Register_rsvd.vhd
-- Created: 2013-03-14 17:42:03
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Register_rsvd
-- Source Path: ivedsp/IN_OUT_Controller/Register
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ivedsp_pkg.ALL;

ENTITY Register_rsvd IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Data                              :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Offset                            :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        Enable                            :   IN    std_logic;
        PC_Out                            :   OUT   vector_of_std_logic_vector8(0 TO 3)  -- uint8 [4]
        );
END Register_rsvd;


ARCHITECTURE rtl OF Register_rsvd IS

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Enable_out3                      : std_logic;
  SIGNAL Offset_unsigned                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Data_unsigned                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL PC_Out0_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch1_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL PC_Out1_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch2_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL PC_Out2_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch3_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL PC_Out3_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch4_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux_out1                         : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Mux_out1_last_value              : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Mux_out1_bypass                  : vector_of_unsigned8(0 TO 3);  -- uint8 [4]

BEGIN
  Enable_out3 <= Enable;

  Offset_unsigned <= unsigned(Offset);

  
  Compare_To_Constant_out1 <= '1' WHEN Offset_unsigned = 0 ELSE
      '0';

  Data_unsigned <= unsigned(Data);

  enb_gated <= Enable_out3 AND enb;

  
  Switch1_out1 <= PC_Out0_out1 WHEN Compare_To_Constant_out1 = '0' ELSE
      Data_unsigned;

  PC_Out0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PC_Out0_out1 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        PC_Out0_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS PC_Out0_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN Offset_unsigned = 1 ELSE
      '0';

  
  Switch2_out1 <= PC_Out1_out1 WHEN Compare_To_Constant1_out1 = '0' ELSE
      Data_unsigned;

  PC_Out1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PC_Out1_out1 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        PC_Out1_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS PC_Out1_process;


  
  Compare_To_Constant2_out1 <= '1' WHEN Offset_unsigned = 2 ELSE
      '0';

  
  Switch3_out1 <= PC_Out2_out1 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Data_unsigned;

  PC_Out2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PC_Out2_out1 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        PC_Out2_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS PC_Out2_process;


  
  Compare_To_Constant3_out1 <= '1' WHEN Offset_unsigned = 3 ELSE
      '0';

  
  Switch4_out1 <= PC_Out3_out1 WHEN Compare_To_Constant3_out1 = '0' ELSE
      Data_unsigned;

  PC_Out3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PC_Out3_out1 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        PC_Out3_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS PC_Out3_process;


  Mux_out1(0) <= PC_Out0_out1;
  Mux_out1(1) <= PC_Out1_out1;
  Mux_out1(2) <= PC_Out2_out1;
  Mux_out1(3) <= PC_Out3_out1;

  PC_Out_bypass_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Mux_out1_last_value <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Mux_out1_last_value <= Mux_out1;
      END IF;
    END IF;
  END PROCESS PC_Out_bypass_process;

  Mux_out1_bypass <= Mux_out1 WHEN Enable_out3 = '1' ELSE
                     Mux_out1_last_value;

  outputgen: FOR k IN 0 TO 3 GENERATE
    PC_Out(k) <= std_logic_vector(Mux_out1_bypass(k));
  END GENERATE;

END rtl;

