-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_FPU\ise_project_fpu\MAC_Resource.vhd
-- Created: 2013-01-13 16:54:23
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: MAC_Resource
-- Source Path: ivedsp/MAC Resource
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ivedsp_pkg.ALL;

ENTITY MAC_Resource IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        op1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        op2                               :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        reset_1                           :   IN    std_logic;
        FPU_Result                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        MAC                               :   IN    std_logic;
        result                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        FPU_Start                         :   OUT   std_logic;
        FPU_OP1                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        FPU_OP2                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        FPU_INSTR                         :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        MAC_Ready                         :   OUT   std_logic
        );
END MAC_Resource;


ARCHITECTURE rtl OF MAC_Resource IS

  -- Signals
  SIGNAL op1_unsigned                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL op2_unsigned                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FPU_Result_unsigned              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL is_MAC_Resource                  : T_state_type_is_MAC_Resource;  -- uint8
  SIGNAL Internal_ACC                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL result_tmp                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FPU_OP1_tmp                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FPU_OP2_tmp                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FPU_INSTR_tmp                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL ind                              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL buf_res                          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL buf_op1                          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL buf_op2                          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL result_reg                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FPU_Start_reg                    : std_logic;
  SIGNAL FPU_OP1_reg                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FPU_OP2_reg                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FPU_INSTR_reg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL MAC_Ready_reg                    : std_logic;
  SIGNAL is_MAC_Resource_next             : T_state_type_is_MAC_Resource;  -- enumerated type (9 enums)
  SIGNAL Internal_ACC_next                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL ind_next                         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL buf_res_next                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL buf_op1_next                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL buf_op2_next                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL result_reg_next                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FPU_Start_reg_next               : std_logic;
  SIGNAL FPU_OP1_reg_next                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FPU_OP2_reg_next                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL FPU_INSTR_reg_next               : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL MAC_Ready_reg_next               : std_logic;

BEGIN
  op1_unsigned <= unsigned(op1);

  op2_unsigned <= unsigned(op2);

  FPU_Result_unsigned <= unsigned(FPU_Result);

  MAC_Resource_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Internal_ACC <= to_unsigned(0, 32);
      ind <= to_unsigned(0, 4);
      buf_res <= to_unsigned(0, 32);
      buf_op1 <= to_unsigned(0, 32);
      buf_op2 <= to_unsigned(0, 32);
      result_reg <= to_unsigned(0, 32);
      FPU_Start_reg <= '0';
      FPU_OP1_reg <= to_unsigned(0, 32);
      FPU_OP2_reg <= to_unsigned(0, 32);
      FPU_INSTR_reg <= to_unsigned(0, 3);
      MAC_Ready_reg <= '0';
      is_MAC_Resource <= IN_Wait;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        is_MAC_Resource <= is_MAC_Resource_next;
        Internal_ACC <= Internal_ACC_next;
        ind <= ind_next;
        buf_res <= buf_res_next;
        buf_op1 <= buf_op1_next;
        buf_op2 <= buf_op2_next;
        result_reg <= result_reg_next;
        FPU_Start_reg <= FPU_Start_reg_next;
        FPU_OP1_reg <= FPU_OP1_reg_next;
        FPU_OP2_reg <= FPU_OP2_reg_next;
        FPU_INSTR_reg <= FPU_INSTR_reg_next;
        MAC_Ready_reg <= MAC_Ready_reg_next;
      END IF;
    END IF;
  END PROCESS MAC_Resource_1_process;

  MAC_Resource_1_output : PROCESS (is_MAC_Resource, op1_unsigned, op2_unsigned, reset_1, Internal_ACC, FPU_Result_unsigned, 
      ind, buf_res, MAC, buf_op1, buf_op2, result_reg, FPU_Start_reg, FPU_OP1_reg, FPU_OP2_reg, 
      FPU_INSTR_reg, MAC_Ready_reg)
  BEGIN
    is_MAC_Resource_next <= is_MAC_Resource;
    Internal_ACC_next <= Internal_ACC;
    ind_next <= ind;
    buf_res_next <= buf_res;
    buf_op1_next <= buf_op1;
    buf_op2_next <= buf_op2;
    result_reg_next <= result_reg;
    FPU_Start_reg_next <= FPU_Start_reg;
    FPU_OP1_reg_next <= FPU_OP1_reg;
    FPU_OP2_reg_next <= FPU_OP2_reg;
    FPU_INSTR_reg_next <= FPU_INSTR_reg;
    MAC_Ready_reg_next <= MAC_Ready_reg;

    CASE is_MAC_Resource IS
      WHEN IN_Accumulate1 =>
        IF ind = 7 THEN 
          Internal_ACC_next <= FPU_Result_unsigned;
          is_MAC_Resource_next <= IN_Multipy1;
        ELSE 
          ind_next <= ind + 1;
          is_MAC_Resource_next <= IN_Accumulate1;
        END IF;
      WHEN IN_Accumulate2 =>
        FPU_Start_reg_next <= '0';
        ind_next <= to_unsigned(0, 4);
        is_MAC_Resource_next <= IN_Accumulate1;
      WHEN IN_Accumulate3 =>
        FPU_OP1_reg_next <= buf_res;
        FPU_OP2_reg_next <= Internal_ACC;
        FPU_INSTR_reg_next <= to_unsigned(0, 3);
        FPU_Start_reg_next <= '1';
        is_MAC_Resource_next <= IN_Accumulate2;
      WHEN IN_Multipy =>
        FPU_Start_reg_next <= '0';
        ind_next <= to_unsigned(0, 4);
        is_MAC_Resource_next <= IN_Wait3;
      WHEN IN_Multipy1 =>
        result_reg_next <= Internal_ACC;
        MAC_Ready_reg_next <= '1';
        is_MAC_Resource_next <= IN_Multipy2;
      WHEN IN_Multipy2 =>
        MAC_Ready_reg_next <= '0';
        FPU_OP1_reg_next <= to_unsigned(0, 32);
        FPU_OP2_reg_next <= to_unsigned(0, 32);
        is_MAC_Resource_next <= IN_Wait;
      WHEN IN_Multipy3 =>
        FPU_OP1_reg_next <= buf_op1;
        FPU_OP2_reg_next <= buf_op2;
        FPU_INSTR_reg_next <= to_unsigned(2, 3);
        FPU_Start_reg_next <= '1';
        is_MAC_Resource_next <= IN_Multipy;
      WHEN IN_Wait =>
        IF reset_1 = '1' THEN 
          Internal_ACC_next <= to_unsigned(0, 32);
          result_reg_next <= to_unsigned(0, 32);
          FPU_OP1_reg_next <= to_unsigned(0, 32);
          FPU_OP2_reg_next <= to_unsigned(0, 32);
          is_MAC_Resource_next <= IN_Wait;
        ELSIF MAC = '1' THEN 
          buf_op1_next <= op1_unsigned;
          buf_op2_next <= op2_unsigned;
          is_MAC_Resource_next <= IN_Multipy3;
        ELSE 
          is_MAC_Resource_next <= IN_Wait;
        END IF;
      WHEN IN_Wait3 =>
        IF ind = 11 THEN 
          buf_res_next <= FPU_Result_unsigned;
          ind_next <= to_unsigned(0, 4);
          is_MAC_Resource_next <= IN_Accumulate3;
        ELSE 
          ind_next <= ind + 1;
          is_MAC_Resource_next <= IN_Wait3;
        END IF;
      WHEN OTHERS => 
        is_MAC_Resource_next <= IN_Wait;
    END CASE;

  END PROCESS MAC_Resource_1_output;

  result_tmp <= result_reg_next;
  FPU_Start <= FPU_Start_reg_next;
  FPU_OP1_tmp <= FPU_OP1_reg_next;
  FPU_OP2_tmp <= FPU_OP2_reg_next;
  FPU_INSTR_tmp <= FPU_INSTR_reg_next;
  MAC_Ready <= MAC_Ready_reg_next;

  result <= std_logic_vector(result_tmp);

  FPU_OP1 <= std_logic_vector(FPU_OP1_tmp);

  FPU_OP2 <= std_logic_vector(FPU_OP2_tmp);

  FPU_INSTR <= std_logic_vector(FPU_INSTR_tmp);

END rtl;

