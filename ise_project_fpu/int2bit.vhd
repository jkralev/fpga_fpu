-- -------------------------------------------------------------
-- 
-- File Name: D:\Dan\FPGA_Test\ise_project_1\int2bit.vhd
-- Created: 2012-11-02 14:15:17
-- 
-- Generated by MATLAB 7.11 and Simulink HDL Coder 2.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: int2bit
-- Source Path: test_rx/int2bit
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.test_rx_pkg.ALL;

ENTITY int2bit IS
  PORT( In1                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Out1                              :   OUT   std_logic_vector(0 TO 7)  -- boolean [8]
        );
END int2bit;


ARCHITECTURE rtl OF int2bit IS

  -- Signals
  SIGNAL In1_unsigned                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitMask_for_Bitwise_Operator7    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitMask_for_Bitwise_Operator6    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitMask_for_Bitwise_Operator5    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitMask_for_Bitwise_Operator4    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitMask_for_Bitwise_Operator3    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitMask_for_Bitwise_Operator2    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitMask_for_Bitwise_Operator1    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bitwise_Operator7_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic6_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bitwise_Operator6_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic5_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bitwise_Operator5_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic4_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bitwise_Operator4_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic3_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bitwise_Operator3_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic2_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bitwise_Operator2_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic1_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bitwise_Operator1_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic_out1            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitMask_for_Bitwise_Operator     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bitwise_Operator_out1            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux_out1                         : vector_of_unsigned8(0 TO 7);  -- uint8 [8]
  SIGNAL Data_Type_Conversion_out1        : std_logic_vector(0 TO 7);  -- boolean [8]

BEGIN
  In1_unsigned <= unsigned(In1);

  bitMask_for_Bitwise_Operator7 <= to_unsigned(128, 8);

  bitMask_for_Bitwise_Operator6 <= to_unsigned(64, 8);

  bitMask_for_Bitwise_Operator5 <= to_unsigned(32, 8);

  bitMask_for_Bitwise_Operator4 <= to_unsigned(16, 8);

  bitMask_for_Bitwise_Operator3 <= to_unsigned(8, 8);

  bitMask_for_Bitwise_Operator2 <= to_unsigned(4, 8);

  bitMask_for_Bitwise_Operator1 <= to_unsigned(2, 8);

  Bitwise_Operator7_out1 <= In1_unsigned AND bitMask_for_Bitwise_Operator7;

  Shift_Arithmetic6_out1 <= Bitwise_Operator7_out1 srl 7;

  Bitwise_Operator6_out1 <= In1_unsigned AND bitMask_for_Bitwise_Operator6;

  Shift_Arithmetic5_out1 <= Bitwise_Operator6_out1 srl 6;

  Bitwise_Operator5_out1 <= In1_unsigned AND bitMask_for_Bitwise_Operator5;

  Shift_Arithmetic4_out1 <= Bitwise_Operator5_out1 srl 5;

  Bitwise_Operator4_out1 <= In1_unsigned AND bitMask_for_Bitwise_Operator4;

  Shift_Arithmetic3_out1 <= Bitwise_Operator4_out1 srl 4;

  Bitwise_Operator3_out1 <= In1_unsigned AND bitMask_for_Bitwise_Operator3;

  Shift_Arithmetic2_out1 <= Bitwise_Operator3_out1 srl 3;

  Bitwise_Operator2_out1 <= In1_unsigned AND bitMask_for_Bitwise_Operator2;

  Shift_Arithmetic1_out1 <= Bitwise_Operator2_out1 srl 2;

  Bitwise_Operator1_out1 <= In1_unsigned AND bitMask_for_Bitwise_Operator1;

  Shift_Arithmetic_out1 <= Bitwise_Operator1_out1 srl 1;

  bitMask_for_Bitwise_Operator <= to_unsigned(1, 8);

  Bitwise_Operator_out1 <= In1_unsigned AND bitMask_for_Bitwise_Operator;

  Mux_out1(0) <= Shift_Arithmetic6_out1;
  Mux_out1(1) <= Shift_Arithmetic5_out1;
  Mux_out1(2) <= Shift_Arithmetic4_out1;
  Mux_out1(3) <= Shift_Arithmetic3_out1;
  Mux_out1(4) <= Shift_Arithmetic2_out1;
  Mux_out1(5) <= Shift_Arithmetic1_out1;
  Mux_out1(6) <= Shift_Arithmetic_out1;
  Mux_out1(7) <= Bitwise_Operator_out1;

  
  Data_Type_Conversion_out1(0) <= '1' WHEN Mux_out1(0) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(1) <= '1' WHEN Mux_out1(1) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(2) <= '1' WHEN Mux_out1(2) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(3) <= '1' WHEN Mux_out1(3) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(4) <= '1' WHEN Mux_out1(4) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(5) <= '1' WHEN Mux_out1(5) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(6) <= '1' WHEN Mux_out1(6) /= 0 ELSE
      '0';
  
  Data_Type_Conversion_out1(7) <= '1' WHEN Mux_out1(7) /= 0 ELSE
      '0';

  Out1 <= Data_Type_Conversion_out1;

END rtl;

